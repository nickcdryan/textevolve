
            You are developing a Python script to solve problems using LLM reasoning capabilities.
            You are in the EXPLORATION PHASE. You must generate a NEW approach that's different from previous approaches but informed by their successes and failures. With this approach, you will have a specific NEW HYPOTHESIS or variable you are trying to test. Your goal is to see if this new approach works, and you must add verification and validation steps to deduce if this new change is helpful. You may also test RADICAL NEW APPROACHES that are substantially different from previous approaches. 
            
            You should try NEW THINGS:
            
            Break down the problem into smaller pieces
            Think CREATIVELY about how to solve your problem if other approaches aren't working
            Transform data into different formats to see if it helps

            # YOUR TASK
            You are deeply familiar with prompting techniques and the agent works from the literature. 
            Your goal is to maximize the specified performance metrics by proposing interestingly new agents.
            Observe the past discovered agents and scripts carefully and think about what insights, lessons, or stepping stones can be learned from them.
            Be creative when thinking about the next interesting agent to try. You are encouraged to draw inspiration from related agent papers or academic papers from other research areas.
            Use the knowledge from the archive and inspiration from academic literature to propose the next interesting agentic system design.
            THINK OUTSIDE THE BOX.
            

            Here are example problems from previously seen data:
            [
  {
    "id": 0,
    "question": "What is the name of the individual who was awarded the Paul Karrer Gold Medal in 2004?",
    "answer": "Ada Yonath"
  },
  {
    "id": 1,
    "question": "What is the name of the university where Ana Figueroa, a political activist and government official, studies and graduates from?",
    "answer": "University of Chile "
  },
  {
    "id": 2,
    "question": "Which genus was the ruby-throated bulbul moved to from *Turdus* before finally being classified in the genus *Rubigula*?",
    "answer": "Genus Pycnonotus"
  }
]

            HISTORICAL CONTEXT:
            
        ITERATION HISTORY SUMMARY:
        - Total iterations completed: 4
        - Current explore/exploit balance: 72/28
        - Best accuracy achieved: 0.33 (iteration 1)

        APPROACH HISTORY (last 4 iterations):
        [
  {
    "iteration": 0,
    "strategy": "Exploration",
    "accuracy": 0.0,
    "approach": "The script uses an LLM to answer factual questions through iterative refinement, incorporating chain-of-thought reasoning and validation. The problem is decomposed into generating a search query, simulating information retrieval, extracting an answer with a confidence score, and validating the extracted answer. The agent roles involved are a search query generator, a question answering expert, and an answer validator. The script defines a `call_llm` function, which is used to call the Gemini LLM with different prompts, and a `main` function that orchestrates the entire process by calling `call_llm` multiple times to generate search queries, extract answers, and perform validation. The overall workflow is: question -> search query generation -> simulated information retrieval -> answer extraction -> validation -> final answer."
  },
  {
    "iteration": 1,
    "strategy": "Exploitation",
    "accuracy": 0.3333333333333333,
    "approach": "The script uses LLM-based techniques with agent roles for information extraction, search query generation, answer extraction, and answer validation to answer questions. It decomposes the problem into extracting information, generating a search query, simulating search results using the LLM, extracting the answer, and validating the answer. The functions used are `call_llm`, `extract_information`, `generate_search_query`, `extract_answer`, `validate_answer`, and `main`. The `main` function orchestrates the process by calling the functions sequentially, starting with information extraction and ending with answer validation, using the output of one function as input to the next."
  },
  {
    "iteration": 2,
    "strategy": "Exploration",
    "accuracy": 0.0,
    "approach": "The script uses a multi-stage reasoning approach with LLMs to answer factual questions, simulating knowledge graph integration. The problem is decomposed into entity/relationship extraction, knowledge graph lookup, answer synthesis, and validation, each handled by the `call_llm` function with specific system instructions to define agent roles. The `call_llm` function is used to query the Gemini LLM for each stage, passing tailored prompts and system instructions to guide the LLM's behavior. The overall workflow involves extracting entities, looking up information, synthesizing an answer, validating it, and returning the answer if valid."
  },
  {
    "iteration": 3,
    "strategy": "Exploration",
    "accuracy": 0.0,
    "approach": "The script implements a RAG approach with explicit source identification and verification, using the Gemini LLM to answer factual questions. The problem is decomposed into generating a context query, retrieving context from a simulated knowledge base, extracting the answer with source citation, and verifying the extracted answer against the cited source. Three agent roles are involved: one for generating context queries, one for extracting answers, and one for verifying answers. The `call_llm` function is used to interact with the Gemini model, `main` orchestrates the overall workflow, calling `call_llm` to generate a query, extract an answer, and verify the answer based on a knowledge base."
  }
]

        COMMON ERROR PATTERNS:
        []

        PRIMARY ISSUES (last 3 iterations):
        [
  {
    "iteration": 0,
    "issue": "The single most critical problem is the **overly strict or flawed validation process.** The system rejects potentially correct answers, leading to a \"Could not be validated\" response even when a valid answer exists. This is likely due to a high confidence threshold for what constitutes a valid answer, incorrect logic in comparing retrieved information with the question's requirements, or an incomplete knowledge base."
  },
  {
    "iteration": 1,
    "issue": "The primary issue is the system's **lack of robust reasoning and inference capabilities when processing search results**. It needs to be able to synthesize information from multiple sources, resolve conflicts, and verify answers against a broader knowledge base or logic."
  },
  {
    "iteration": 2,
    "issue": "The single most critical problem is **inaccurate knowledge retrieval** leading to the generation of incorrect answers. This manifests in the system providing a different answer than the provided \"golden answer,\" which indicates an issue with the accuracy of the data the system accesses or the way it queries and interprets the data."
  },
  {
    "iteration": 3,
    "issue": "The single most critical problem to fix is the **ineffective information extraction**. The system's current approach is not successfully identifying and retrieving the answer from the context provided, leading to a consistent \"no answer\" response."
  }
]

        TARGETED IMPROVEMENTS:
        [
  "Implement a multi-stage search and reasoning process:**",
  "Add external knowledge bases (e.g., Wikidata, DBpedia) to verify answers.",
  "Implement External API Access:** Allow the system to access external APIs (e.g., Wikipedia, Google Search) to verify the accuracy of its answers and supplement its internal knowledge base.",
  "Use a question-answering model to independently verify the extracted answer based on the search results.",
  "Implement a \"sanity check\" module to identify obviously incorrect or illogical answers.",
  "Improve Question Understanding:** Implement more sophisticated question understanding techniques, such as semantic parsing or dependency parsing, to extract the key entities and relations from the question.",
  "Implement a Knowledge Graph:** Represent knowledge as a graph with entities and relationships. This can allow for more nuanced and context-aware information retrieval.",
  "Implement a \"Source Tracking\" Mechanism:** Keep track of the sources used to generate each answer, and allow users to review these sources. This can help users evaluate the reliability of the answer.",
  "Develop a Confidence Scoring System:** Assign a confidence score to each answer based on the quality and reliability of the retrieved information. Only present answers with a high confidence score. If confidence is low, provide an \"I don't know\" response or flag the answer for human review.",
  "Implement a more comprehensive validation module:**"
]
        

EXAMPLE OF EFFECTIVE LLM USAGE PATTERNS:

```python
def extract_information_with_examples(text):
    """Extract key information from the input text using embedded examples."""
    system_instruction = "You are an information extraction specialist focusing on identifying key entities and relationships."
    
    prompt = f"""
    Extract key information from this text. Focus on identifying all entities, relationships, and important attributes.
    
    Example usage:
    
    Input Text:
    The company XYZ Corp reported quarterly earnings of $3.5 million, which represents a 12% increase from last year. The CEO, Jane Smith, attributed this growth to their new product line launched in March, which has already captured 8% of the market share. They expect to expand their operations to Europe by Q2 2023.
    
    Let's think step by step.
    
    The key entities are:
    - XYZ Corp (company)
    - Jane Smith (person, CEO)
    - New product line (product)
    
    The key information points are:
    - Financial: Quarterly earnings of $3.5 million
    - Performance: 12% increase from previous year
    - Product: New product line launched in March
    - Market: 8% market share for new product
    - Plans: Expansion to Europe by Q2 2023
    
    Extracted Information:
    {{
      "entities": [
        {{"name": "XYZ Corp", "type": "company"}},
        {{"name": "Jane Smith", "type": "person", "role": "CEO"}},
        {{"name": "New product line", "type": "product", "launch_date": "March"}}
      ],
      "financial_data": {{
        "quarterly_earnings": "$3.5 million",
        "growth_rate": "12%"
      }},
      "market_data": {{
        "product_market_share": "8%"
      }},
      "future_plans": [
        {{"type": "expansion", "region": "Europe", "timeline": "Q2 2023"}}
      ]
    }}
    
    Now, extract information from this new text:
    {text}
    """
    
    return call_llm(prompt, system_instruction)
```

```python
def verify_solution_with_examples(problem, proposed_solution):
    """Verify if the proposed solution satisfies all requirements using embedded examples."""
    system_instruction = "You are a critical evaluator who verifies if solutions correctly address problems."
    
    prompt = f"""
    Verify if this proposed solution correctly addresses all aspects of the problem.
    
    Example usage:
    
    Problem:
    Design a data structure that can efficiently perform the following operations:
    1. Insert a value
    2. Delete a value
    3. Get a random value with equal probability for all stored values
    All operations should have average time complexity of O(1).
    
    Proposed Solution:
    I'll use a combination of a hashmap and an array. The hashmap will store the value as the key and its index in the array as the value. The array will store all the inserted values.
    
    For insert: Add the value to the end of the array and update the hashmap with the value and its index. O(1) time.
    
    For delete: Look up the index of the value in the hashmap, swap the value with the last element in the array, update the hashmap for the swapped element, remove the last element from the array, and remove the value from the hashmap. O(1) time.
    
    For get random: Generate a random index within the array's bounds and return the value at that index. O(1) time.
    
    Verification:
    Let me check each requirement:
    1. Insert operation: The solution adds the value to the end of the array and updates the hashmap with O(1) time complexity ✓
    2. Delete operation: The solution uses the hashmap to find the index, then swaps with the last element and updates accordingly with O(1) time complexity ✓
    3. Get random operation: The solution generates a random index within the array bounds with O(1) time complexity ✓
    4. All operations have O(1) average time complexity ✓
    
    Result: VALID - The solution correctly addresses all requirements with the specified time complexity.
    
    Problem:
    {problem}
    
    Proposed Solution:
    {proposed_solution}
    
    Verification:
    """
    
    return call_llm(prompt, system_instruction)
```

```python
def solve_with_validation_loop(problem, max_attempts=3):
    """Solve a problem with iterative refinement through validation feedback loop."""
    system_instruction_solver = "You are an expert problem solver who creates detailed, correct solutions."
    system_instruction_validator = "You are a critical validator who carefully checks solutions against all requirements."
    
    # Initial solution generation
    solution_prompt = f"""
    Provide a detailed solution to this problem. Be thorough and ensure you address all requirements.
    
    Problem:
    {problem}
    """
    
    solution = call_llm(solution_prompt, system_instruction_solver)
    
    # Validation loop
    for attempt in range(max_attempts):
        # Validate the current solution
        validation_prompt = f"""
        Carefully validate if this solution correctly addresses all aspects of the problem.
        If the solution is valid, respond with "VALID: [brief reason]".
        If the solution has any issues, respond with "INVALID: [detailed explanation of issues]".
        
        Problem:
        {problem}
        
        Proposed Solution:
        {solution}
        """
        
        validation_result = call_llm(validation_prompt, system_instruction_validator)
        
        # Check if solution is valid
        if validation_result.startswith("VALID:"):
            return solution
        
        # If invalid, refine the solution
        refined_prompt = f"""
        Your previous solution to this problem has some issues that need to be addressed.
        
        Problem:
        {problem}
        
        Your previous solution:
        {solution}
        
        Validation feedback:
        {validation_result}
        
        Please provide a completely revised solution that addresses all the issues mentioned.
        """
        
        solution = call_llm(refined_prompt, system_instruction_solver)
    
    return solution
```

```python
def multi_perspective_analysis(problem):
    """Analyze a problem from multiple specialized perspectives and synthesize the insights."""
    # Define specialized analysis functions
    def analyze_factual_content(problem):
        system_instruction = "You are a factual analyst who focuses on identifying key facts and data points."
        prompt = f"""
        Analyze this problem for factual content only. Identify explicit facts, constraints, and requirements.
        
        Problem:
        {problem}
        """
        return call_llm(prompt, system_instruction)
    
    def analyze_structure(problem):
        system_instruction = "You are a structural analyst who specializes in problem organization and patterns."
        prompt = f"""
        Analyze the structure of this problem. Identify its components, relationships, and patterns.
        
        Problem:
        {problem}
        """
        return call_llm(prompt, system_instruction)
    
    # Execute parallel analyses
    factual_analysis = analyze_factual_content(problem)
    structural_analysis = analyze_structure(problem)
    
    # Synthesize the results
    synthesis_prompt = f"""
    Synthesize these two different analyses of the same problem into a comprehensive understanding.
    
    Factual Analysis:
    {factual_analysis}
    
    Structural Analysis:
    {structural_analysis}
    
    Provide a unified analysis that leverages both perspectives.
    """
    
    return call_llm(synthesis_prompt, "You are an insight synthesizer who combines multiple analyses.")
```

```python
def best_of_n_approach(problem, n=3):
    """Generate multiple solutions and select the best one based on a quality evaluation."""
    system_instruction_solver = "You are an expert problem solver who provides detailed, correct solutions."
    system_instruction_evaluator = "You are a quality evaluator who assesses solutions based on correctness, completeness, and clarity."
    
    # Generate n different solutions
    solutions = []
    for i in range(n):
        diversity_factor = f"Solution approach {i+1}/{n}: Use a different perspective from previous solutions."
        solution_prompt = f"""
        Provide a detailed solution to this problem.
        {diversity_factor if i > 0 else ""}
        
        Problem:
        {problem}
        """
        
        solutions.append(call_llm(solution_prompt, system_instruction_solver))
    
    # Evaluate each solution
    evaluations = []
    for i, solution in enumerate(solutions):
        evaluation_prompt = f"""
        Evaluate this solution on correctness, completeness, and clarity (1-10 scale).
        
        Problem:
        {problem}
        
        Solution {i+1}:
        {solution}
        
        Provide your evaluation as a JSON with scores and explanation.
        """
        
        evaluations.append(call_llm(evaluation_prompt, system_instruction_evaluator))
    
    # Find the best solution
    comparison_prompt = f"""
    Compare these solutions and their evaluations. Select the best one.
    
    Problem:
    {problem}
    
    {["Solution " + str(i+1) + ": " + solutions[i] + "\n\nEvaluation: " + evaluations[i] for i in range(n)]}
    
    Which solution is best? Respond with the solution number and explanation.
    """
    
    best_solution_index = int(call_llm(comparison_prompt, "You are a solution selector.").split()[1]) - 1
    return solutions[best_solution_index]
```

```python
def solve_with_react_pattern(problem):
    """Solve problems through iterative Reasoning and Acting (ReAct) approach."""
    system_instruction = "You are a problem-solving agent that follows the ReAct pattern: Reason about the current state, take an Action, observe the result, and repeat until reaching a solution."
    
    # Initialize ReAct process
    prompt = f"""
    Solve this problem using the ReAct pattern - alternate between Reasoning and Acting until you reach a final answer.
    
    Example usage:
    
    Problem: What is the capital of the country where the Great Barrier Reef is located, and what is the population of that capital?
    
    Thought 1: I need to determine which country the Great Barrier Reef is in, then find its capital, and finally the population of that capital.
    Action 1: Search[Great Barrier Reef location]
    Observation 1: The Great Barrier Reef is located off the coast of Queensland in northeastern Australia.
    
    Thought 2: Now I know the Great Barrier Reef is in Australia. I need to find Australia's capital city.
    Action 2: Search[capital of Australia]
    Observation 2: The capital of Australia is Canberra.
    
    Thought 3: Now I need to find the population of Canberra.
    Action 3: Search[population of Canberra]
    Observation 3: As of 2021, the population of Canberra is approximately 431,500.
    
    Thought 4: I have found all the required information. The capital of Australia (where the Great Barrier Reef is located) is Canberra, and its population is approximately 431,500.
    Action 4: Finish[The capital of Australia is Canberra, with a population of approximately 431,500.]
    
    Now solve this new problem:
    {problem}
    
    Start with Thought 1:
    """
    
    # Initial reasoning and action planning
    react_response = call_llm(prompt, system_instruction)
    
    # Extract the action from the response
    action = extract_action(react_response)
    
    # Continue the ReAct loop until we reach a "Finish" action
    while not action["type"] == "Finish":
        # Perform the requested action and get an observation
        if action["type"] == "Search":
            observation = perform_search(action["query"])
        elif action["type"] == "Calculate":
            observation = perform_calculation(action["expression"])
        elif action["type"] == "Lookup":
            observation = perform_lookup(action["term"])
        else:
            observation = f"Unknown action type: {action['type']}"
        
        # Continue the ReAct process with the new observation
        continuation_prompt = f"""
        {react_response}
        Observation {action["step_number"]}: {observation}
        
        Continue with the next thought and action:
        """
        
        # Get the next reasoning step and action
        react_response += "\n" + call_llm(continuation_prompt, system_instruction)
        
        # Extract the next action
        action = extract_action(react_response)
    
    # Extract the final answer from the Finish action
    final_answer = action["answer"]
    return final_answer

def extract_action(text):
    """Parse the ReAct response to extract the current action."""
    # Find the last action in the text
    action_matches = re.findall(r"Action (\d+): (\w+)\[(.*?)\]", text)
    if not action_matches:
        return {"type": "Error", "step_number": 0, "query": "No action found"}
    
    # Get the most recent action
    last_action = action_matches[-1]
    step_number = int(last_action[0])
    action_type = last_action[1]
    action_content = last_action[2]
    
    # Handle different action types
    if action_type == "Finish":
        return {"type": "Finish", "step_number": step_number, "answer": action_content}
    elif action_type in ["Search", "Lookup", "Calculate"]:
        return {"type": action_type, "step_number": step_number, "query": action_content}
    else:
        return {"type": "Unknown", "step_number": step_number, "query": action_content}

def perform_search(query):
    """Simulate a search action in the ReAct pattern."""
    # In a real implementation, this would call an actual search API
    return call_llm(f"Provide a factual answer about: {query}", "You are a helpful search engine that provides concise, factual information.")

def perform_calculation(expression):
    """Perform a calculation action in the ReAct pattern."""
    try:
        # Safely evaluate the expression
        result = eval(expression, {"__builtins__": {}}, {"math": math})
        return f"The result is {result}"
    except Exception as e:
        return f"Error in calculation: {str(e)}"

def perform_lookup(term):
    """Simulate a lookup action for specific information."""
    # In a real implementation, this would query a knowledge base or database
    return call_llm(f"Provide specific information about: {term}", "You are a knowledge base that provides specific factual information.")
```MULTI-EXAMPLE PROMPTING GUIDANCE:
        1. CRITICAL: Use MULTIPLE examples (2-5) in EVERY LLM prompt, not just one
        2. Vary the number of examples based on task complexity - more complex tasks need more examples
        3. Select diverse examples that showcase different patterns and edge cases
        4. Structure your few-shot examples to demonstrate clear step-by-step reasoning
        5. Consider using both "easy" and "challenging" examples to help the LLM learn from contrasts
        6. The collection of examples should collectively cover all key aspects of the problem
        7. When available, use examples from previous iterations that revealed specific strengths or weaknesses.
        8. USE REAL EXAMPLES FROM THE DATASET WHERE POSSIBLE!!

        Example of poor single-example prompting:
        ```python
        def extract_entities(text):
            prompt = f'''
            Extract entities from this text.

            Example:
            Text: John will meet Mary at 3pm on Tuesday.
            Entities: {{"people": ["John", "Mary"], "time": "3pm", "day": "Tuesday"}}

            Text: {text}
            Entities:
            '''
            return call_llm(prompt)
        ```

        Example of effective multi-example prompting:
        ```python
        def extract_entities(text):
            prompt = f'''
            Extract entities from this text.

            Example 1:
            Text: John will meet Mary at 3pm on Tuesday.
            Entities: {{"people": ["John", "Mary"], "time": "3pm", "day": "Tuesday"}}

            Example 2:
            Text: The team needs to submit the report by Friday at noon.
            Entities: {{"people": ["the team"], "time": "noon", "day": "Friday", "object": "report"}}

            Example 3:
            Text: Alex cannot attend the conference from Jan 3-5 due to prior commitments.
            Entities: {{"people": ["Alex"], "event": "conference", "date_range": ["Jan 3-5"], "reason": "prior commitments"}}

            Text: {text}
            Entities:
            '''
            return call_llm(prompt)
        ```

        === DIRECT LLM REASONING APPROACH ===

        CRITICAL: Previous scripts have shown that complex code generation with JSON parsing and multi-step pipelines often 
        leads to errors and low performance. Instead, focus on leveraging the LLM's natural reasoning abilities:

        1. SIMPLIFY YOUR APPROACH:
           - Minimize the number of processing steps - simpler is better
           - Directly use LLM for pattern recognition rather than writing complex code
           - Avoid trying to parse or manipulate JSON manually - pass it as text to the LLM

        2. DIRECT TRANSFORMATION:
           - Instead of trying to extract features and then apply them, use the LLM to do the transformation directly
           - Use examples to teach the LLM the pattern, then have it apply that pattern to new inputs
           - Avoid attempting to write complex algorithmic solutions when pattern recognition will work better

        3. ROBUST ERROR HANDLING:
           - Include multiple approaches in case one fails (direct approach + fallback approach)
           - Use simple validation to check if outputs are in the expected format
           - Include a last-resort approach that will always return something valid

        4. AVOID COMMON PITFALLS:
           - Do NOT attempt to use json.loads() or complex JSON parsing - it often fails
           - Do NOT create overly complex Python pipelines that require perfect indentation
           - Do NOT create functions that generate or execute dynamic code
           - Do NOT create unnecessarily complex data transformations

        5. SUCCESSFUL EXAMPLES:
           - The most successful approaches have used direct pattern matching with multiple examples
           - Scripts with simple validation and fallback approaches perform better
           - Scripts with fewer processing steps have higher success rates
        
        IMPLEMENTATION STRATEGIES:
        1. Maintain a "example bank" of successful and failed examples to select from
        2. Implement n-shot prompting with n=3 as default, but adapt based on performance
        3. For complex tasks, use up to 5 examples; for simpler tasks, 2-3 may be sufficient
        4. Include examples with a range of complexity levels, rather than all similar examples



        VALIDATION AND VERIFICATION GUIDANCE:
        1. CRITICAL: Consider implementing validation loops for EACH key processing step, not just final outputs
        2. Design your system to detect, diagnose, and recover from specific errors. This will help future learnings
        3. For every LLM extraction or generation, add a verification step that checks:
           - Whether the output is well-formed and complete
           - Whether the output is logically consistent with the input
           - Whether all constraints are satisfied
        4. Add feedback loops that retry failures with specific feedback
        5. Include diagnostic outputs that reveal exactly where failures occur. Add print statements and intermediate outputs such that you can see them later to determine why things are going wrong.
        6. Include capability to trace through execution steps to identify failure points

        Example of pipeline without verification:
        ```python
        def process_question(question):
            entities = extract_entities(question)
            constraints = identify_constraints(question)
            solution = generate_solution(entities, constraints)
            return solution
        ```

        Example of robust pipeline with verification:
        ```python
        def process_question(question, max_attempts=3):
            # Step 1: Extract entities with verification
            entities_result = extract_entities_with_verification(question)
            if not entities_result.get("is_valid"):
                print(f"Entity extraction failed: {entities_result.get('validation_feedback')}")
                return f"Error in entity extraction: {entities_result.get('validation_feedback')}"

            # Step 2: Identify constraints with verification
            constraints_result = identify_constraints_with_verification(question, entities_result["entities"])
            if not constraints_result.get("is_valid"):
                print(f"Constraint identification failed: {constraints_result.get('validation_feedback')}")
                return f"Error in constraint identification: {constraints_result.get('validation_feedback')}"

            # Step 3: Generate solution with verification
            solution_result = generate_solution_with_verification(
                question, 
                entities_result["entities"], 
                constraints_result["constraints"]
            )
            if not solution_result.get("is_valid"):
                print(f"Solution generation failed: {solution_result.get('validation_feedback')}")
                return f"Error in solution generation: {solution_result.get('validation_feedback')}"

            return solution_result["solution"]

        def extract_entities_with_verification(question, max_attempts=3):
            #Extract entities and verify their validity with feedback loop.
            system_instruction = "You are an expert at extracting and validating entities."

            for attempt in range(max_attempts):
                # First attempt at extraction
                extraction_prompt = f'''
                Extract key entities from this question. 
                Return a JSON object with the extracted entities.

                Example 1: [example with entities]
                Example 2: [example with different entities]
                Example 3: [example with complex entities]

                Question: {question}
                Extraction:
                '''

                extracted_data = call_llm(extraction_prompt, system_instruction)

                try:
                    # Parse the extraction
                    data = json.loads(extracted_data)

                    # Verification step
                    verification_prompt = f'''
                    Verify if these extracted entities are complete and correct:

                    Question: {question}
                    Extracted entities: {json.dumps(data, indent=2)}

                    Check if:
                    1. All relevant entities are extracted
                    2. No irrelevant entities are included
                    3. All entity values are correct

                    Return a JSON with:
                    {{
                      "is_valid": true/false,
                      "validation_feedback": "detailed explanation",
                      "missing_entities": ["entity1", "entity2"],
                      "incorrect_entities": ["entity3"]
                    }}
                    '''

                    verification_result = call_llm(verification_prompt, system_instruction)
                    verification_data = json.loads(verification_result)

                    if verification_data.get("is_valid", False):
                        data["is_valid"] = True
                        data["validation_feedback"] = "All entities are valid."
                        return data

                    # If not valid and we have attempts left, refine with feedback
                    if attempt < max_attempts - 1:
                        feedback = verification_data.get("validation_feedback", "")
                        print(f"Validation failed (attempt {attempt+1}/{max_attempts}): {feedback}")
                        continue

                    # If we're out of attempts, return the best we have with validation info
                    data["is_valid"] = False
                    data["validation_feedback"] = verification_data.get("validation_feedback", "Unknown validation error")
                    return data

                except Exception as e:
                    print(f"Error in extraction/validation (attempt {attempt+1}/{max_attempts}): {str(e)}")
                    if attempt >= max_attempts - 1:
                        return {
                            "is_valid": False,
                            "validation_feedback": f"Error during processing: {str(e)}"
                        }

            return {
                "is_valid": False,
                "validation_feedback": "Failed to extract valid entities after multiple attempts."
            }
        ```

        VALIDATION IMPLEMENTATION STRATEGIES:
        1. Create detailed verification functions for each major processing step
        2. Implement max_attempts limits on all retry loops (typically 3-5 attempts)
        3. Pass specific feedback from verification to subsequent retry attempts
        4. Log all verification failures to help identify systemic issues
        5. Design fallback behaviors when verification repeatedly fails

        

            PREVIOUSLY TRIED APPROACHES (LAST 5 SCRIPTS). YOUR APPROACH MUST BE SUBSTANTIVELY DIFFERENT THAN THESE:
            
PREVIOUSLY TRIED APPROACHES (LAST 5 SCRIPTS):

=== SCRIPT FROM ITERATION 3 (Exploration, ACCURACY: 0.00) ===
Approach: The script implements a RAG approach with explicit source identification and verification, using the Gemini LLM to answer factual questions. The problem is decomposed into generating a context query, retrieving context from a simulated knowledge base, extracting the answer with source citation, and verifying the extracted answer against the cited source. Three agent roles are involved: one for generating context queries, one for extracting answers, and one for verifying answers. The `call_llm` function is used to interact with the Gemini model, `main` orchestrates the overall workflow, calling `call_llm` to generate a query, extract an answer, and verify the answer based on a knowledge base.

```python
import os
import re
import math

def call_llm(prompt, system_instruction=None):
    """Call the Gemini LLM with a prompt and return the response. DO NOT deviate from this example template or invent configuration options. This is how you call the LLM."""
    try:
        from google import genai
        from google.genai import types

        # Initialize the Gemini client
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        # Call the API with system instruction if provided
        if system_instruction:
            response = client.models.generate_content(
                model="gemini-2.0-flash", 
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction
                ),
                contents=prompt
            )
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )

        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return f"Error: {str(e)}"

def main(question):
    """Solve factual questions using a new approach: RAG with explicit source identification and verification."""

    # Hypothesis: Providing the LLM with specific context from a simulated knowledge base, and then asking it to explicitly cite the source for its answer, will improve accuracy.
    # This addresses the previous issues of inaccurate knowledge retrieval and overly strict validation by giving the LLM more focused information and requiring transparency.

    # Step 1: Generate a query to retrieve relevant context from a simulated knowledge base (with examples)
    context_query_prompt = f"""
    Generate a concise query to retrieve relevant context from a knowledge base to answer the following question.

    Example 1:
    Question: Who was the lead programmer of Project Firebreak who helped create CYAN in Horizon Zero Dawn: The Frozen Wilds?
    Context Query: Project Firebreak lead programmer Horizon Zero Dawn CYAN

    Example 2:
    Question: In which month and year did Apple add the ability for users to speak "Hey Siri" to enable the assistant without the requirement of physically handling the device?
    Context Query: Apple Hey Siri release date

    Question: {question}
    Context Query:
    """
    context_query = call_llm(context_query_prompt, system_instruction="You are an expert at generating context queries.")

    # Step 2: Simulate retrieval of context from a knowledge base (replace with actual retrieval mechanism if available)
    simulated_knowledge_base = {
        "Project Firebreak lead programmer Horizon Zero Dawn CYAN": "Anita Sandoval was the lead programmer of Project Firebreak, which helped create CYAN in Horizon Zero Dawn: The Frozen Wilds.",
        "Apple Hey Siri release date": "Apple added the 'Hey Siri' feature in September 2014.",
        "ISCB Accomplishment by a Senior Scientist Award 2019 recipient": "Bonnie Berger was the recipient of the ISCB Accomplishment by a Senior Scientist Award in 2019."
    }
    retrieved_context = simulated_knowledge_base.get(context_query, "No relevant context found.")

    # Step 3: Extract the answer from the context, *explicitly citing the source* (with examples)
    answer_extraction_prompt = f"""
    Given the question and the retrieved context, extract the answer and explicitly cite the source from which the answer was derived.

    Example 1:
    Question: Who was the lead programmer of Project Firebreak who helped create CYAN in Horizon Zero Dawn: The Frozen Wilds?
    Retrieved Context: Anita Sandoval was the lead programmer of Project Firebreak, which helped create CYAN in Horizon Zero Dawn: The Frozen Wilds.
    Answer: Anita Sandoval (Source: Anita Sandoval was the lead programmer of Project Firebreak, which helped create CYAN in Horizon Zero Dawn: The Frozen Wilds.)

    Example 2:
    Question: In which month and year did Apple add the ability for users to speak "Hey Siri" to enable the assistant without the requirement of physically handling the device?
    Retrieved Context: Apple added the 'Hey Siri' feature in September 2014.
    Answer: September 2014 (Source: Apple added the 'Hey Siri' feature in September 2014.)

    Question: {question}
    Retrieved Context: {retrieved_context}
    Answer:
    """
    answer_extraction_response = call_llm(answer_extraction_prompt, system_instruction="You are an expert at extracting answers from context and citing the source.")

    # Step 4: Verify that the extracted answer is supported by the cited source.
    verification_prompt = f"""
    Verify if the extracted answer is supported by the cited source.

    Example 1:
    Question: Who was the lead programmer of Project Firebreak who helped create CYAN in Horizon Zero Dawn: The Frozen Wilds?
    Extracted Answer: Anita Sandoval (Source: Anita Sandoval was the lead programmer of Project Firebreak, which helped create CYAN in Horizon Zero Dawn: The Frozen Wilds.)
    Verification: The answer is supported by the source. VALID.

    Example 2:
    Question: In which month and year did Apple add the ability for users to speak "Hey Siri" to enable the assistant without the requirement of physically handling the device?
    Extracted Answer: September 2014 (Source: Apple added the 'Hey Siri' feature in September 2014.)
    Verification: The answer is supported by the source. VALID.

    Question: {question}
    Extracted Answer: {answer_extraction_response}
    Verification:
    """
    verification_result = call_llm(verification_prompt, system_instruction="You are an expert at verifying answers based on provided sources.")

    if "VALID" in verification_result:
        return answer_extraction_response.split('(Source:')[0].strip()
    else:
        return "Could not be validated."
```

=== SCRIPT FROM ITERATION 2 (Exploration, ACCURACY: 0.00) ===
Approach: The script uses a multi-stage reasoning approach with LLMs to answer factual questions, simulating knowledge graph integration. The problem is decomposed into entity/relationship extraction, knowledge graph lookup, answer synthesis, and validation, each handled by the `call_llm` function with specific system instructions to define agent roles. The `call_llm` function is used to query the Gemini LLM for each stage, passing tailored prompts and system instructions to guide the LLM's behavior. The overall workflow involves extracting entities, looking up information, synthesizing an answer, validating it, and returning the answer if valid.

```python
import os
import re
import math

def call_llm(prompt, system_instruction=None):
    """Call the Gemini LLM with a prompt and return the response."""
    try:
        from google import genai
        from google.genai import types

        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        if system_instruction:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction
                ),
                contents=prompt
            )
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )

        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return f"Error: {str(e)}"

def main(question, max_attempts=3):
    """Solve factual questions using a multi-stage reasoning approach with knowledge graph integration."""

    # Hypothesis: Integrating a simple knowledge graph lookup (simulated) into the reasoning process will improve accuracy.
    # The knowledge graph provides structured knowledge that can be leveraged.

    # Step 1: Identify key entities and relationships from the question (with examples)
    entity_extraction_prompt = f"""
    Extract key entities and relationships from the following question.

    Example 1:
    Question: What is the capital of the country where the Great Barrier Reef is located?
    Entities: Great Barrier Reef, Australia
    Relationship: located in

    Example 2:
    Question: Before the New 52, who murdered the supervillain Monsieur Mallah?
    Entities: Monsieur Mallah, New 52
    Relationship: murdered by

    Question: {question}
    Entities and Relationships:
    """
    entities_relationships = call_llm(entity_extraction_prompt, "You are an expert at extracting entities and relationships.")

    # Step 2: Lookup relevant information in a simulated knowledge graph (with examples)
    knowledge_graph_lookup_prompt = f"""
    Given entities and relationships, look up relevant information in a knowledge graph.

    Example 1:
    Entities: Great Barrier Reef, Australia
    Relationship: located in
    Knowledge Graph Result: The Great Barrier Reef is located in Australia. Australia's capital is Canberra.

    Example 2:
    Entities: Monsieur Mallah, New 52
    Relationship: murdered by
    Knowledge Graph Result: Monsieur Mallah was murdered by Gorilla Grodd before the New 52.

    Entities and Relationships: {entities_relationships}
    Knowledge Graph Result:
    """
    knowledge_graph_results = call_llm(knowledge_graph_lookup_prompt, "You are an expert at knowledge graph lookups.")

    # Step 3: Synthesize information from the knowledge graph and answer the question (with examples)
    answer_synthesis_prompt = f"""
    Synthesize information from the knowledge graph to answer the question.

    Example 1:
    Question: What is the capital of the country where the Great Barrier Reef is located?
    Knowledge Graph Result: The Great Barrier Reef is located in Australia. Australia's capital is Canberra.
    Answer: Canberra

    Example 2:
    Question: Before the New 52, who murdered the supervillain Monsieur Mallah?
    Knowledge Graph Result: Monsieur Mallah was murdered by Gorilla Grodd before the New 52.
    Answer: Gorilla Grodd

    Question: {question}
    Knowledge Graph Result: {knowledge_graph_results}
    Answer:
    """
    final_answer = call_llm(answer_synthesis_prompt, "You are an expert at synthesizing information and answering questions.")

    # Step 4: Validate the answer against the question
    validation_prompt = f"""
    Validate if the answer is correct and completely answers the question.

    Question: {question}
    Proposed Answer: {final_answer}

    Is the answer correct? Respond 'Correct' or 'Incorrect'.
    """
    validation_result = call_llm(validation_prompt, "You are an expert validator.")

    if "Correct" in validation_result:
        return final_answer
    else:
        return "Could not be validated."
```

=== SCRIPT FROM ITERATION 1 (Exploitation, ACCURACY: 0.33) ===
Approach: The script uses LLM-based techniques with agent roles for information extraction, search query generation, answer extraction, and answer validation to answer questions. It decomposes the problem into extracting information, generating a search query, simulating search results using the LLM, extracting the answer, and validating the answer. The functions used are `call_llm`, `extract_information`, `generate_search_query`, `extract_answer`, `validate_answer`, and `main`. The `main` function orchestrates the process by calling the functions sequentially, starting with information extraction and ending with answer validation, using the output of one function as input to the next.

```python
import os
import re
import math

def call_llm(prompt, system_instruction=None):
    """Call the Gemini LLM with a prompt and return the response. DO NOT deviate from this example template or invent configuration options. This is how you call the LLM."""
    try:
        from google import genai
        from google.genai import types

        # Initialize the Gemini client
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        # Call the API with system instruction if provided
        if system_instruction:
            response = client.models.generate_content(
                model="gemini-2.0-flash", 
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction
                ),
                contents=prompt
            )
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )

        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return f"Error: {str(e)}"

def extract_information(question):
    """Extract key information from the question, including entities and constraints."""
    system_instruction = "You are an expert information extractor."
    prompt = f"""
    Extract the key entities and constraints from the following question.

    Example 1:
    Question: What is the capital of the country where the Great Barrier Reef is located?
    Entities: Great Barrier Reef
    Constraints: Location is a country, seeking its capital

    Example 2:
    Question: How many corners did Barcelona take in the Champions League semi-final match between Barcelona and Milan on April 27, 2006?
    Entities: Barcelona, Champions League, Milan, April 27, 2006
    Constraints: Corners taken by Barcelona, in that specific match

    Question: {question}
    Entities and Constraints:
    """
    return call_llm(prompt, system_instruction)

def generate_search_query(question, extracted_info):
    """Generate a search query based on the question and extracted information."""
    system_instruction = "You are a search query generator."
    prompt = f"""
    Generate a search query to answer the question, using the extracted information.

    Example 1:
    Question: What is the capital of Australia?
    Extracted Info: Australia, capital
    Search Query: "capital of Australia"

    Example 2:
    Question: How many corners did Barcelona take in the Champions League semi-final match between Barcelona and Milan on April 27, 2006?
    Extracted Info: Barcelona, Champions League, Milan, April 27, 2006, corners
    Search Query: "Barcelona Milan Champions League April 27 2006 corner kicks"

    Question: {question}
    Extracted Info: {extracted_info}
    Search Query:
    """
    return call_llm(prompt, system_instruction)

def extract_answer(question, search_results):
    """Extract the answer from the search results and provide a confidence score."""
    system_instruction = "You are an answer extraction expert."
    prompt = f"""
    Extract the answer to the question from the search results and provide a confidence score (1-10).

    Example 1:
    Question: What is the capital of Australia?
    Search Results: Canberra is the capital city of Australia.
    Answer: Canberra (Confidence: 10)

    Example 2:
    Question: How many corners did Barcelona take in the Champions League semi-final match between Barcelona and Milan on April 27, 2006?
    Search Results: Barcelona took 3 corners in the match.
    Answer: 3 (Confidence: 10)

    Question: {question}
    Search Results: {search_results}
    Answer:
    """
    return call_llm(prompt, system_instruction)

def validate_answer(question, answer):
    """Validate if the extracted answer is correct and satisfies the question's requirements."""
    system_instruction = "You are an answer validator."
    prompt = f"""
    Validate if the extracted answer is correct and satisfies the question's requirements. Provide a detailed explanation.

    Example 1:
    Question: What is the capital of Australia?
    Answer: Canberra (Confidence: 10)
    Validation: VALID - The answer is correct and satisfies the question's requirements.

    Example 2:
    Question: How many corners did Barcelona take in the Champions League semi-final match between Barcelona and Milan on April 27, 2006?
    Answer: 3 (Confidence: 10)
    Validation: VALID - The answer is correct and satisfies the question's requirements.

    Question: {question}
    Answer: {answer}
    Validation:
    """
    return call_llm(prompt, system_instruction)

def main(question):
    """Main function to answer the question."""
    try:
        # Step 1: Extract information
        extracted_info = extract_information(question)
        print(f"Extracted Info: {extracted_info}")

        # Step 2: Generate search query
        search_query = generate_search_query(question, extracted_info)
        print(f"Search Query: {search_query}")

        # Step 3: Simulate information retrieval
        search_results = call_llm(search_query, "You are a helpful search engine that provides concise, factual information.")
        print(f"Search Results: {search_results}")

        # Step 4: Extract answer
        extracted_answer_raw = extract_answer(question, search_results)
        print(f"Extracted Answer (raw): {extracted_answer_raw}")
        
        #Split out answer and confidence score
        try:
            extracted_answer = extracted_answer_raw.split('(Confidence:')[0].strip()
            confidence = int(extracted_answer_raw.split('(Confidence:')[1].replace(')','').strip())
        except:
            extracted_answer = extracted_answer_raw
            confidence = 5 #low confidence score to force validation to work

        # Step 5: Validate answer
        validation_result = validate_answer(question, extracted_answer)
        print(f"Validation Result: {validation_result}")

        if "VALID" in validation_result:
            return extracted_answer
        else:
            return "Could not be validated."
    except Exception as e:
        print(f"Error: {str(e)}")
        return f"Error: {str(e)}"
```

=== SCRIPT FROM ITERATION 0 (Exploration, ACCURACY: 0.00) ===
Approach: The script uses an LLM to answer factual questions through iterative refinement, incorporating chain-of-thought reasoning and validation. The problem is decomposed into generating a search query, simulating information retrieval, extracting an answer with a confidence score, and validating the extracted answer. The agent roles involved are a search query generator, a question answering expert, and an answer validator. The script defines a `call_llm` function, which is used to call the Gemini LLM with different prompts, and a `main` function that orchestrates the entire process by calling `call_llm` multiple times to generate search queries, extract answers, and perform validation. The overall workflow is: question -> search query generation -> simulated information retrieval -> answer extraction -> validation -> final answer.

```python
import os
import re
import math

def call_llm(prompt, system_instruction=None):
    """Call the Gemini LLM with a prompt and return the response."""
    try:
        from google import genai
        from google.genai import types

        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        if system_instruction:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction
                ),
                contents=prompt
            )
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )

        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return f"Error: {str(e)}"

def main(question, max_attempts=3):
    """Solve factual questions using iterative retrieval and refinement with detailed validation."""

    # Hypothesis: Integrating web search *directly* into the LLM prompting, rather than as a separate action, will improve accuracy.

    # Step 1: Generate initial search query based on the question (with examples)
    search_query_prompt = f"""
    Given a factual question, generate a concise and effective search query that will retrieve relevant information from the web.

    Example 1:
    Question: What was the first name of the wife of the American chemist Ralph E. Oesper?
    Search Query: Ralph E. Oesper wife's name

    Example 2:
    Question: Who formed the Dubai-based band Sho? in June 2009?
    Search Query: Dubai band Sho formed June 2009

    Question: {question}
    Search Query:
    """
    search_query = call_llm(search_query_prompt, "You are a search query generator.")

    # Step 2: Embed search query and retrieve information (simulated)
    retrieved_info = f"Simulated web search results for: {search_query}. Placeholder for real search functionality."  # Replace with actual search API call

    # Step 3: Refine and extract answer from retrieved information (with examples and validation)
    answer_extraction_prompt = f"""
    Given a question and relevant information, extract the answer and provide a confidence score (1-10).

    Example 1:
    Question: What was the first name of the wife of the American chemist Ralph E. Oesper?
    Relevant Information: Helen Oesper was the wife of Ralph E. Oesper.

    Let's think step by step.
    The question is about the first name of Ralph E. Oesper's wife.
    The relevant information clearly states Helen Oesper was his wife.
    So, the answer is Helen.
    Confidence Score: 10

    Answer: Helen
    Confidence Score: 10

    Example 2:
    Question: In the series "El guardián invisible," who portrays the character Alfonso Álvarez de Toledo?
    Relevant Information: Ramón Barea played Alfonso Álvarez de Toledo in "El guardián invisible".

    Let's think step by step.
    The question is about who portrays the character Alfonso Álvarez de Toledo in "El guardián invisible."
    The relevant information clearly states Ramón Barea played the character.
    So, the answer is Ramón Barea.
    Confidence Score: 10

    Answer: Ramón Barea
    Confidence Score: 10
    
    Question: {question}
    Relevant Information: {retrieved_info}

    Let's think step by step.
    """

    answer_extraction_response = call_llm(answer_extraction_prompt, "You are a question answering expert.")
    try:
        extracted_answer = answer_extraction_response.split("Answer:")[1].split("Confidence Score:")[0].strip()
    except IndexError:
        extracted_answer = "Could not extract answer."

    # Step 4: Make an independent validation call.
    verification_prompt = f"""
    Question: {question}
    Retrieved Information: {retrieved_info}
    Extracted answer: {extracted_answer}

    The question is:
    {question}
    Given the problem statement and the relevant information, validate the answer, step by step.
    If the answer is incorrect, return 'Incorrect'. If the answer is correct, return 'Correct'.
    """

    validation = call_llm(prompt=verification_prompt, system_instruction="You are an expert at validating answers based on a question and provided information. Return a plain language answer of 'Correct' or 'Incorrect'.")

    # If the validation is correct, return the answer. If not, respond that the answer cannot be validated.
    if validation == 'Correct':
        pass
    elif validation == 'Incorrect':
        return "Could not be validated."
    else:
        return "Could not be validated."

    return extracted_answer
```


            LEARNINGS FROM PREVIOUS ITERATIONS:
            
        ACCUMULATED LEARNINGS FROM PREVIOUS ITERATIONS:
        Okay, here's the updated and synthesized version of our learnings, focusing specifically on the given dataset and task. This document will serve as our evolving research log.

## 1. DATASET PATTERNS & CHARACTERISTICS

*   **Factual and Specific Questions:** Questions are factual and seek specific pieces of information across a wide range of topics (music, chemistry, oceanography, bands, television, technology, awards, and biological classifications).
*   **Emphasis on Proper Nouns and Named Entities:** Questions frequently contain proper nouns and specific dates, making them amenable to information retrieval. Answers are often short phrases, often consisting of one or a few proper nouns (names of people or things). Examples: "Who was the first cardiologist in Kashmir?" "Who murdered the supervillain Monsieur Mallah?", "Who was the lead programmer for Project Firebreak?". "Name of person awarded a specific prize in a specific year", "Genus transitions of a species".
*   **Explicit Named Entities:** Questions frequently focus on named entities like people, organizations (universities), and biological classifications (genus, species). The questions directly ask *for the name of* these things.
*   **Question Types:** Primarily fact-retrieval questions asking for specific details about people, places, or things ("Who...", "What...", "Name of...").
*   **Need for Precise Factual Recall:** Questions require precise factual recall, often involving dates, numbers, or names (e.g., "Champions League semi-final match between Barcelona and Milan on April 27, 2006", "What month and year did Apple release the Hey Siri feature?").
*   **Contextual Specificity:** Questions often contain specific contextual details (e.g., "Champions League semi-final match between Barcelona and Milan on April 27, 2006") to narrow the scope of the answer.
*   **Information Extraction Task:** The dataset tests the ability to extract *very specific* pieces of information from potentially larger contexts. It's not simply about broad topic understanding.
*   **"Who" questions requiring specific names:** Many questions (e.g., "Who was the first cardiologist in Kashmir?") require identifying specific individuals, making accurate name retrieval crucial.
*   **Questions requiring temporal context:** Some questions ("What day did India land its first spacecraft on the moon?", "Before the New 52, who murdered the supervillain Monsieur Mallah?", "What month and year did Apple release the Hey Siri feature?") involve temporal qualifiers. This demands understanding of historical or fictional timelines to extract correct information.
*   **Questions expecting definitive answers:** The questions expect precise answers (specific dates, names), not general descriptions or related concepts.
*   **Complex Factual Questions:** The dataset contains complex factual questions that often require multi-hop reasoning or accessing multiple pieces of information. This is evident in questions like the "Hey Siri" query, which requires understanding the feature and the company (Apple).
*   **Entity Specificity:** Many questions revolve around specific entities like people (e.g., "Anita Sandoval", "Bonnie Berger"), projects ("Project Firebreak"), awards ("ISCB Accomplishment by a Senior Scientist Award", "Paul Karrer Gold Medal"), and products ("Horizon Zero Dawn"). The correctness depends heavily on identifying these entities accurately.
*   **Temporal Reasoning:** Some questions (e.g., "Hey Siri" question) require temporal reasoning, understanding dates, and relating events to specific time periods.
*   **Complex Question Structure:** The questions are fact-retrieval based but require understanding relationships and potentially hierarchical information (e.g., name of a person awarded a specific prize in a specific year, genus transitions of a species).
*   **Context Dependency:** The answers are not directly present in the question itself; they require accessing and processing external information (simulated knowledge base) and connecting it to the question terms.

## 2. EFFECTIVE TASK-SPECIFIC STRATEGIES

*   **Initial Attempts Ineffective:** The initial strategy of using an LLM for iterative refinement with a validation step resulted in 0% accuracy, indicating the need for significant improvements.
*   **Current Accuracy Very Low:** With an accuracy of 0.33 in experiment 1 and 0.00 in experiments 2 & 3, no current strategies can be considered effectively "working". The underlying framework shows potential but requires significant refinement.
*   **RAG Framework Insufficient:** The initial hypothesis that a basic RAG framework with Gemini is sufficient for this task is rejected. The current implementation struggles to extract answers, even with explicit source citation and verification steps. The decomposition into multiple agents (query generation, extraction, verification) doesn't appear to be effective with the current implementation.

## 3. COMMON FAILURE MODES ON THIS DATASET

*   **Overly Strict Validation:** The primary failure mode is the "Could not be validated" response. This suggests the validation logic is too rigid.
    *   **Example:** The date question "Specify the day, month, and year..." could fail if the extracted answer includes the day of the week, even if the core date is correct. The "Hey Siri" question also resulted in "Could not be validated," indicating that the system failed to extract the correct month and year from its knowledge source.
*   **Lack of Contextual Understanding During Validation:** The validator likely struggles to relate the retrieved information to the specific constraints in the question.
    *   **Example:** For the corner kicks question, the validator might not be able to verify that the retrieved number of corners specifically relates to the *Barcelona* team, the *Champions League* match, and the specified date.
*   **Dependency on Perfect Information Retrieval:** The system's reliance on simulated retrieval means a slightly off search query can lead to no relevant information, and thus, a validation failure even if the LLM could have reasoned with broader knowledge.
*   **Ambiguity:** A question might have multiple possible answers depending on context.
*   **Synonyms/Paraphrasing:** The answer might be expressed differently in the source text than in the question.
*   **Misspellings/Typos:** Both in the question and the potential answer source.
*   **Cultural References:** Some questions may rely on understanding cultural or historical context that is not explicitly stated.
*   **Multiple entities with the same name:** disambiguation may be necessary.
*   **UnboundLocalError:** Error detected during script repair (attempt 1): cannot access local variable 'extracted_answer' where it is not associated with a value. This highlights the need for robust error handling and ensuring variables are properly initialized.
*   **Inability to resolve conflicting information:** In the "first cardiologist" question, the LLM extracted "Dr. Sheikh Jalal" instead of the correct "Dr Upendra Kaul," indicating a failure in discerning accurate information from potentially conflicting (simulated) search results. The system needs a more robust method for selecting the correct answer when multiple possibilities are presented in the search context.
*   **Failure to identify the correct entity in search results:** For the "Monsieur Mallah" question, the system returned "Unknown from search result" when the correct answer was "Gorilla Grodd." This suggests the model struggled to extract the specific entity (Gorilla Grodd) related to the murder event from the provided context, even if the information was present in the simulated search results. This can be due to named entity recognition failure, relationship extraction failure, or even failures in question understanding. For the "Project Firebreak" question, the LLM returned "Naoya Oda" instead of "Anita Sandoval," indicating a failure to accurately link the project to the correct lead programmer.
*   **Poor Simulated Search Results:** The low accuracy (0.33 in experiment 1 and 0.00 in experiments 2 & 3) reinforces the possibility that the simulated search results are not accurate or relevant enough, hindering both information extraction and validation.
*   **Inaccurate Entity Resolution:** The primary failure mode is the inability to resolve entities correctly.
*   **Knowledge Graph Misidentification/Hallucination:** The "ISCB Accomplishment by a Senior Scientist Award" example showcases a failure to retrieve the correct information from the knowledge source. The LLM returns "Janet Thornton" instead of "Bonnie Berger," suggesting that either the lookup process is flawed, or the LLM is hallucinating information not present in the knowledge source.
*   **Information Extraction Bottleneck:** The primary failure mode is the inability of the system to extract the correct answer from the provided context. The LLM consistently returns "No answer can be extracted," even when the ground truth answer is present within the knowledge base. This suggests a problem with the *answer extraction* agent, rather than the *context query generation* agent.
*   **Lack of Understanding Contextual Relationships:** The error examples suggest the system struggles to identify and connect the relevant information from the context to the specific question. For example, identifying "Ada Yonath" as the recipient of a particular award in a given year requires understanding the relationship between the person, the award, and the year within the context.
*   **Potential impact of agent prompting**: The prompt to the extraction agent is likely not optimized for extracting the precise answer from the context.
*   **Information extraction as a critical failure point**: We've identified that information extraction specifically, rather than the RAG setup, is the point of failure.

## 4. EXPERIMENT LOG & FINDINGS

*   **Experiment 0 (Initial Exploration):**
    *   **Strategy:** LLM-based iterative refinement with validation.
    *   **Result:** 0% accuracy.
    *   **Finding:** The initial configuration of prompts, validation logic, or information retrieval simulation is inadequate. The hypothesis that the LLM, with its inherent knowledge, can directly answer complex questions involving precise factual data and validation is rejected in its current form.
*   **Experiment 1 (Agent-based LLM Approach):**
    *   **Strategy:** Basic framework of information extraction, query generation, simulated search, answer extraction, and validation.
    *   **Result:** 0.33 accuracy.
    *   **Finding:** The agent-based LLM approach, in its current form, struggles with reasoning and information synthesis from (simulated) search results. The failure to accurately answer questions involving specific entities (names, dates) indicates a weakness in linking entities to the events described in the questions.
*   **Experiment 2:**
    *   **Strategy:** Multi-stage reasoning with explicit instructions for entity extraction, knowledge lookup, synthesis, and validation.
    *   **Result:** 0.00 accuracy.
    *   **Finding:** The experiment rejected the hypothesis that a multi-stage reasoning approach with LLMs, even with explicit instructions for each stage (entity extraction, knowledge lookup, synthesis, validation), is sufficient to answer complex factual questions without more robust knowledge retrieval mechanisms. The decomposition into stages did not compensate for the base-level problem of incorrect information retrieval. The experiment also confirmed the reliance of LLMs on external knowledge sources when answering factual questions. Inaccurate information from these sources directly leads to incorrect answers, regardless of the sophistication of the reasoning process.
*   **Experiment 3:**
    *   **Strategy:** RAG (Retrieval Augmented Generation) framework with Gemini model. Multiple agents for query generation, information extraction, and verification with explicit source citation.
    *   **Result:** 0.00 accuracy.
    *   **Finding:** The initial hypothesis that a basic RAG framework with Gemini is sufficient for this task is rejected. The current implementation struggles to extract answers, even with explicit source citation and verification steps. The decomposition into multiple agents (query generation, extraction, verification) doesn't appear to be effective with the current implementation. Information extraction, specifically, is a critical failure point. The generic LLM is insufficient to reliably perform this task, or at least the current prompting strategy is insufficient.
*   **Script Repair Errors:**
    *   **Error 1:** `UnboundLocalError: cannot access local variable 'extracted_answer' where it is not associated with a value`. Occurred during script repair attempt 1. Indicates a logic error where `extracted_answer` was used before being assigned a value.
    *   **Error 2 & 3:** "ERROR: Validation failure" during script repair attempts 2 & 3. This reinforces the issues with the overly strict validation process.

## 5. NEXT RESEARCH DIRECTIONS

*   **Improve Answer Extraction Prompting:** Focus on refining the prompt used by the answer extraction agent. Experiment with more specific instructions, few-shot examples demonstrating the desired extraction format, and constraints on the output format (e.g., "Only provide the name of the person/university/genus").
*   **Incorporate Relationship Extraction Techniques:** Explore incorporating relationship extraction techniques into the answer extraction agent. This could involve using the LLM to explicitly identify relationships between entities in the context and then using this information to extract the answer. For example, prompt the LLM to identify the 'awardee' relationship for the 'Paul Karrer Gold Medal' in '2004'.
*   **Fine-tune extraction**: Consider fine-tuning a smaller, more efficient LLM specifically for the information extraction task. This could improve the accuracy and speed of the system.
*   **Test Context Quality**: While the focus is on extraction, verify that the retrieved context contains the necessary information *before* optimizing the extraction prompt. There's an implicit assumption the context is adequate, but this should be explicitly validated.
*   **Analyze Failure Cases in Detail**: Conduct a more in-depth analysis of the failure cases. For each failure, examine the question, the retrieved context, the LLM's response, and the ground truth answer to identify the root cause of the failure. This will help to identify specific areas where the system needs improvement.
*   **Improve Entity Linking/Resolution:** Implement more robust entity linking strategies, such as using a named entity disambiguation module before querying the LLM. This could involve cross-referencing extracted entities against a known database or knowledge graph to ensure accurate identification.
*   **Refine Knowledge Graph Retrieval:** Investigate the knowledge graph lookup process. This could involve:
    *   Evaluating the quality and coverage of the underlying knowledge graph.
    *   Optimizing the query formulation to the knowledge graph based on extracted entities and relationships. Ensure the queries are precise and target the specific information needed.
*   **Implement a Fact Verification Module:** Before answer synthesis, add a step to verify the extracted information against multiple sources (if available) to reduce the impact of incorrect information from a single source.
*   **Relax Validation Criteria:** Implement more flexible validation. Consider:
    *   Semantic similarity checks instead of exact string matching.
    *   Allowing for answers that contain more information than the minimal expected answer, as long as the core information is present and correct.
    *   Introducing a confidence score threshold for validation, where answers with high confidence, even if not perfectly matching the expected answer, are accepted.
*   **Improve Contextual Understanding in Validation:** Enhance the validation prompt to explicitly consider the context provided in the original question. For example, provide the validator with the original question and ask it to confirm that the extracted answer directly addresses all parts of the question (team, event, date, etc.).
*   **Evaluate Information Retrieval Simulation:** Examine the quality of the simulated information retrieval. Is the search query being generated effectively capturing the essence of the question? Does the "retrieved" information contain the answer (even if the extraction fails)? Consider adding a step to evaluate the quality of the retrieved information independently of the answer extraction.
*   **Implement Explicit Error Handling/Reporting:** Instead of simply outputting "Could not be validated," provide more detailed feedback on *why* the validation failed. This will help diagnose issues with the validation process itself and prevent similar errors (like the `UnboundLocalError`) in the future.
*   **Prompt Engineering for Answer Extraction:** Refine the prompt used for answer extraction. Ensure it clearly instructs the LLM to extract the *specific* information requested and to provide a confidence score.
*   **Address the `UnboundLocalError`:** Implement a default value for `extracted_answer` or refactor the code to guarantee it is always assigned before being used. Add logging to track the flow of execution and variable assignments.
*   **Focus on RAG (Retrieval Augmented Generation):** Prioritize techniques that combine information retrieval with LLM generation to leverage external knowledge and reduce hallucination. Start with basic RAG and iteratively refine the retrieval and generation prompts.
*   **Improve Search Query Generation:** Refine the `generate_search_query` function to produce more targeted queries that specifically address the key entities and relationships in the question. For the "Monsieur Mallah" example, ensure the query explicitly targets the murderer.
*   **Enhance Answer Extraction with Contextual Reasoning:** Enhance the `extract_answer` function to consider the context within the simulated search results. Implement strategies to weigh different sources of information based on reliability or relevance, and to resolve conflicts between sources.
*   **Strengthen Validation Logic:** The `validate_answer` function needs more sophisticated logic to identify semantic equivalence. For example, it should be able to recognize that "Gorilla Grodd" is the murderer of Monsieur Mallah even if the search results don't explicitly state "Gorilla Grodd murdered Monsieur Mallah" but contain information strongly implying it.
*   **Data Augmentation with Known Facts:** Augment the simulated search results with known facts, or use an LLM specifically trained for QA to extract more accurate information. This is to overcome the issue of poor simulated search results.
*   **Implement Explicit Reasoning Steps:** Force the LLM to verbalize its reasoning steps (e.g., "I found X in source Y. Source Z contradicts this, but source Y is more reliable. Therefore, the answer is X."). This makes debugging and error analysis easier. This could be done in the prompt, or by adding another LLM step for this explicit reasoning.
*   **Improve validation stage:** The "Could not be validated" error suggests a problem with determining the correctness of the final answer. Improve this stage by explicitly prompting for the reasoning behind the answer.
*   **Implement RAG with specific knowledge base:** Instead of letting the LLM find the information, use Retrieval Augmented Generation to provide the context to the LLM. This involves creating or selecting a relevant knowledge base and designing a retrieval mechanism to fetch the most relevant passages based on the question.
*   **Need for enhanced fine-tuning**: The generic LLM is insufficient to reliably perform this task, or at least the current prompting strategy is insufficient.
        

            CAPABILITY ASSESSMENT & IMPROVEMENT GUIDANCE:
            
        CAPABILITY ASSESSMENT & IMPROVEMENT GUIDANCE:
        SYSTEM ANALYSIS & GUIDANCE


        

            EXPLORATION GUIDANCE:
            1. Review the historical approaches, error patterns, and accumulated learnings carefully
            2. Review the FULL CODE of previous scripts to understand what has already been tried
            3. Design a new approach that is DISTINCTLY DIFFERENT from previous attempts. This approach should have a specific NEW HYPOTHESIS or variable you are trying to test. 
            4. CRITICAL: Include EMBEDDED EXAMPLES directly within your LLM prompts
            5. For each key function, show a complete worked example, or include multiple examples, including:
               - Input example that resembles the dataset
               - Step-by-step reasoning through the example
               - Properly formatted output
            6. Apply the insights from the ACCUMULATED LEARNINGS section to avoid repeating past mistakes
            7. Pay SPECIAL ATTENTION to the weaknesses and improvement suggestions from the capability assessment
            8. Consider implementing one or more of these LLM usage patterns:
               - Repeated validation with feedback loops
               - Multi-perspective analysis with synthesis
               - Dynamic input-dependent routing with an orchestrator
               - Hybrid approaches combining LLM with deterministic functions
               - Best-of-n solution generation and selection
               - ReAct pattern for interactive reasoning and action
               - If it is unknown how successful a processing state or part of the pipeline is, include verification steps to different parts of the pipeline in order to help deduce which parts are successful and where the system is breaking
               - Answer checkers to validate the final answer against the problem statement. If the answer is incorrect, the checker can send the answer back to an earlier part of the system for for refinement with feedback

            Here's how to call the Gemini API. Use this example without modification and don't invent configuration options:
            def call_llm(prompt, system_instruction=None):
    """Call the Gemini LLM with a prompt and return the response. DO NOT deviate from this example template or invent configuration options. This is how you call the LLM."""
    try:
        from google import genai
        from google.genai import types

        # Initialize the Gemini client
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        # Call the API with system instruction if provided
        if system_instruction:
            response = client.models.generate_content(
                model="gemini-2.0-flash", 
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction
                ),
                contents=prompt
            )
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )

        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return f"Error: {str(e)}"

            Since this is an EXPLORATION phase:
            - Try a fundamentally different approach to reasoning about the problem. Test a NEW HYPOTHESIS or variable, and add verification steps to deduce if this new change is helpful.
            - THIS IS KEY: Break down the problem into new, distinct reasoning steps based on past performance before you start coding
            - For EACH key LLM prompt, include a relevant example with:
              * Sample input similar to the dataset
              * Expected reasoning steps
              * Desired output format
            - Apply a verifier call to different parts of the pipeline in order to understand what parts of the pipeline of calls is successful and where the system is breaking
            - Pay special attention to addressing the primary issues from previous iterations
            - Ensure your new approach addresses the weaknesses identified in the capability assessment

            CRITICAL REQUIREMENTS:
            1. The script MUST properly handle all string literals - be extremely careful with quotes and triple quotes
            2. The script MUST NOT exceed 150 lines of code to prevent truncation
            3. Include detailed comments explaining your reasoning approach
            4. EVERY SINGLE LLM PROMPT must include at least one embedded example showing:
               - Sample input with reasoning
               - Desired output format
            5. Make proper use of error handling
            6. Implement robust capabilities to address the specific weaknesses identified in the capability assessment
            7. Do NOT use json.loads() in the LLM calls to process input data. JSON formatting is good to use to structure information as inputs and outputs, but attempting to have functions process JSON data explicitly with strict built-in functionality is error prone due to formatting issues and additional text that appears as documentation, reasoning, or comments. When passing data into another LLM call, you can read it as plain text rather than trying to load it in strict json format, is the better approach.

            Return a COMPLETE, RUNNABLE Python script that:
            1. Has a main function that takes a question string as input and returns the answer string
            2. Makes multiple LLM calls for different reasoning steps
            3. Has proper error handling for API calls
            4. Includes embedded examples in EVERY LLM prompt
            5. Is COMPLETE - no missing code, no "..." placeholders
            6. Closes all string literals properly

            This should be FUNDAMENTALLY DIFFERENT from all previous approaches. Do not reuse the same overall structure.

            BE EXTREMELY CAREFUL TO PROPERLY CLOSE ALL STRING QUOTES AND TRIPLE QUOTES!
            