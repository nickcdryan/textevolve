import os
import re

def solve_grid_transformation(question, max_attempts=3):
    """Solve grid transformation problems using LLM with validation."""

    def call_llm(prompt, system_instruction=None):
        """Call the Gemini LLM with a prompt and return the response. DO NOT deviate from this example template or invent configuration options. This is how you call the LLM."""
        try:
            from google import genai
            from google.genai import types

            # Initialize the Gemini client
            client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

            # Call the API with system instruction if provided
            if system_instruction:
                response = client.models.generate_content(
                    model="gemini-2.0-flash", 
                    config=types.GenerateContentConfig(
                        system_instruction=system_instruction
                    ),
                    contents=prompt
                )
            else:
                response = client.models.generate_content(
                    model="gemini-2.0-flash",
                    contents=prompt
                )

            return response.text
        except Exception as e:
            print(f"Error calling Gemini API: {str(e)}")
            return f"Error: {str(e)}"
    
    def extract_transformation_with_validation(question, max_attempts=3):
        """Extract and validate the transformation rule from the question."""
        system_instruction = "You are a grid transformation expert who accurately extracts transformation rules."
        for attempt in range(max_attempts):
            prompt = f"""
            Analyze the training examples to extract the transformation rule. Explain the rule clearly, focusing on how input grid elements are transformed to create the output grid.
            
            Example:
            Question:
            === TRAINING EXAMPLES ===
            Input Grid:
            [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
            Output Grid:
            [[2, 3, 4], [5, 6, 7], [8, 9, 10]]
            Rule: Each element in the input grid is incremented by 1 to produce the output grid.
            
            Question: {question}
            Rule:
            """
            rule = call_llm(prompt, system_instruction)

            # Verification
            validation_prompt = f"""
            Validate the transformation rule: "{rule}". Is it complete, accurate, and consistent with all training examples in the question: {question}? 
            Respond with VALID or INVALID and a brief explanation.
            """
            validation = call_llm(validation_prompt, system_instruction)
            if "VALID" in validation:
                return rule
            else:
                print(f"Rule extraction failed (attempt {attempt+1}/{max_attempts}): {validation}")
        return None

    def transform_grid_with_validation(question, rule, max_attempts=3):
        """Apply the transformation rule to the test input grid and validate the result."""
        system_instruction = "You are a meticulous grid transformer who applies rules accurately."
        for attempt in range(max_attempts):
            prompt = f"""
            Apply the following transformation rule: "{rule}" to the test input grid provided in the question: {question}.
            Provide the transformed output grid as a nested list of lists.
            
            Example:
            Question:
            === TRAINING EXAMPLES ===
            Input Grid:
            [[1, 2], [3, 4]]
            Output Grid:
            [[2, 3], [4, 5]]
            === TEST INPUT ===
            [[5, 6], [7, 8]]
            Rule: Each element is incremented by 1.
            Transformed Grid:
            [[6, 7], [8, 9]]
            
            Question: {question}
            Transformed Grid:
            """
            transformed_grid = call_llm(prompt, system_instruction)

            # Validation
            validation_prompt = f"""
            Validate if the transformed grid: "{transformed_grid}" is correctly generated by applying the rule: "{rule}" to the test input grid in the question: {question}.
            Respond with VALID or INVALID and a brief explanation.
            """
            validation = call_llm(validation_prompt, system_instruction)
            if "VALID" in validation:
                return transformed_grid
            else:
                print(f"Grid transformation failed (attempt {attempt+1}/{max_attempts}): {validation}")
        return None

    # Main logic
    rule = extract_transformation_with_validation(question)
    if rule:
        transformed_grid = transform_grid_with_validation(question, rule)
        if transformed_grid:
            return transformed_grid
        else:
            return "Error: Failed to transform grid even after multiple attempts."
    else:
        return "Error: Failed to extract transformation rule even after multiple attempts."

def main(question):
    """Main function that takes a question string as input and returns the answer string."""
    return solve_grid_transformation(question)