
            You are improving a Python script that solves problems from a dataset.
            Your goal is to REFINE and ENHANCE the best performing approaches by combining their strengths and addressing specific weaknesses identified in error analysis.

            Here are example problems from previously seen data:
            [
  {
    "id": 0,
    "question": "PASSAGE: Coming off their win over the Steelers, the Patriots stayed at home for an AFC East rematch with the 3-10 Jets. The Patriots punted on their first drive of the game, giving the Jets the ball at their own 3-yard line. After a 1-yard Thomas Jones run, Jets quarterback Clemens threw an interception to Eugene Wilson, who returned it for a touchdown. Clemens was hit by Seymour and suffered an ankle injury on the play and did not return to the game. Wilson also became the Patriots' 21st player to score a touchdown on the season, tying an NFL record set by the Denver Broncos in 2000 and Los Angeles Rams in 1987. On their ensuing possession, the Jets gained 49&#160;yards on an option play to running back Leon Washington, but then failed a fourth down conversion from the Patriots' 17-yard line. With 6:36 remaining in the first quarter, the Patriots began a drive that ended 17 plays later, in the 2nd quarter, on a 26-yard Gostkowski field goal. After a Jets punt, the Patriots moved the ball to their own 40-yard line when a Chris Hanson punt attempt was blocked by David Bowens and returned for a touchdown to cut the Patriots' lead to 10-7. On the Jets' next possession, Washington blocked a Graham punt attempt to give the Patriots the ball at the Jets' 3-yard line. A 1-yard Maroney touchdown run a play later gave the Patriots a 17-7 lead going into halftime. Gostkowski's extra point, his 67th of the season, broke Uwe von Schamann's single-season record of 66 with the Miami Dolphins in 1984. A Jets punt gave the Patriots the ball at their own 9-yard line early in the third quarter. After two Maroney rushes for a total of 5&#160;yards, a Brady pass on third down intended to Moss was intercepted by Jets cornerback Darrelle Revis. The Jets moved into the red zone, but were driven back on a Thomas Jones run for a 1-yard loss and a delay of game penalty. On third down, Pennington completed a 10-yard pass to Baker, who then fumbled. Wilson recovered it for the Patriots, but a subsequent exchange of punts kept the third quarter scoreless. Another Hanson punt began the fourth quarter, giving the Jets the ball from their own 15-yard line. The Jets then embarked upon a 17-play drive where Pennington completed 10 passes on 12 attempts, none for more than 14&#160;yards. The drive ended at the Patriots' 15-yard line, where the Jets cut the Patriots' lead to 17-10 on a 33-yard Mike Nugent field goal. The Patriots' ensuing drive began with two incompletions intended for Moss. On third down, Brady completed a 16-yard pass to Moss, and then a 46-yard pass to Moss to give the Patriots the ball at the Jets' 14-yard line. A 4-yard Maroney run, incompletion, and sack for a loss of 6&#160;yards set up a 33-yard Gostkowski field goal. The Jets' next possession ended in a 35-yard missed Nugent field goal, and the Jets failed to score on their final drive to give the Patriots a 20-10 win. It gave the Patriots a 14-0 record, tying them with the 1972 Miami Dolphins for the best record to start a season. The win also clinched home-field advantage throughout the playoffs for the Patriots.\n\nQUESTION: What was the losing score?",
    "answer": "10"
  },
  {
    "id": 1,
    "question": "PASSAGE: The first archaeological findings around the lake belong to nomadic people living in the area in prehistoric types. The first settlements discovered date from the Copper Age. The area was later under the control of the Ligures, later replaced by the Celts. The latter were in turn conquered by the Romans, who called the lake Verbanus Lacus or Lacus Maximus. After the fall of the Western Roman Empire, the lake was under different dominations. Most of the current settlements originated in the Middle Ages, when the lake was under the Della Torre, Visconti, the Borromeo and Habsburg families. Methane was first discovered and isolated by Alessandro Volta as he analysed marsh gas from Lake Maggiore, between 1776 and 1778. In 1936, a Bugatti Type 22 Brescia Roadster, built 1925, was sunk in the lake by employees of Z\u00fcrich architect Marco Schmucklerski, when Swiss custom officials investigated whether he had paid taxes on the car. The Bugatti was attached to an iron chain making it possible to recover it once the investigation was over, yet that never happened. When the chain corroded, the car sunk to the lake bed, where it was rediscovered on 18 August 1967 by local diver Ugo Pillon and became a favourite target for divers thereafter. When one of the divers, Damiano Tamagni, was killed in a hold-up on 1 February 2008, his friends from the Ascona divers' club decided to lift and sell the carwreck to raise funds for a yet to be created foundation named after the victim. The remains of the Bugatti were recovered on 12 July 2009. The sale took place at the Retro Mobile classic car exhibition in Paris on 23 January 2010. It was sold for \u20ac260,500.\n\nQUESTION: How many years was the Bugatti Roadster at the bottom of the lake?",
    "answer": "73"
  },
  {
    "id": 2,
    "question": "PASSAGE: On 8 April 1918, after the defeat in Tampere and the German army intervention, the People's Delegation retreated from Helsinki to Vyborg. The loss of Helsinki pushed them to Petrograd on 25 April. The escape of the leadership embittered many Reds, and thousands of them tried to flee to Russia, but most of the refugees were encircled by White and German troops. In the Lahti area they surrendered on 1-2 May. The long Red caravans included women and children, who experienced a desperate, chaotic escape with severe losses due to White attacks. The scene was described as a \"road of tears\" for the Reds, but for the Whites, the sight of long, enemy caravans heading east was a victorious moment. The Red Guards' last strongholds between the Kouvola and Kotka area fell by 5 May, after the Battle of Ahvenkoski. The war of 1918 ended on 15 May 1918, when the Whites took over Fort Ino, a Russian coastal artillery base on the Karelian Isthmus, from the Russian troops. White Finland and General Mannerheim celebrated the victory with a large military parade in Helsinki on 16 May 1918. The Red Guards had been defeated. The initially pacifist Finnish labour movement had lost the Civil War, several military leaders committed suicide and a majority of the Reds were sent to prison camps. The Vaasa Senate returned to Helsinki on 4 May 1918, but the capital was under the control of the German army. White Finland had become a protectorate of the German Empire and General R\u00fcdiger von der Goltz was called \"the true Regent of Finland\". No armistice or peace negotiations were carried out between the Whites and Reds and an official peace treaty to end the Finnish Civil War was never signed.\n\nQUESTION: When did the Reds surrender?",
    "answer": "1-2 May"
  }
]

            
        ITERATION HISTORY SUMMARY:
        - Total iterations completed: 19
        - Current explore/exploit balance: 40/60
        - Best accuracy achieved: 1.00 (iteration 1)

        APPROACH HISTORY (last 10 iterations):
        [
  {
    "iteration": 9,
    "strategy": "Exploration",
    "accuracy": 0.6,
    "approach": "This script uses a \"Reading Comprehension Expert\" agent employing self-debate and verification to answer questions. The problem is decomposed into analyzing the question, conducting a self-debate, and verifying the result. The agent embodies the role of a reading comprehension expert and an expert debater.\n\nThe functions used are: `main` to orchestrate the process, `ReadingComprehensionExpert` to contain the agent, `answer_question` to coordinate the self-debate and verification, `_analyze_question` to extract key information, `_conduct_self_debate` to engage in a self-debate, and `call_llm` to interact with the Gemini LLM. The overall workflow involves analyzing the question, conducting a self-debate to arrive at an answer, and verifying the answer for validity using the LLM."
  },
  {
    "iteration": 10,
    "strategy": "Exploration",
    "accuracy": 0.8,
    "approach": "The script uses a \"Holistic Reading & Arithmetic Reasoner\" agent to answer questions by combining reading comprehension and arithmetic problem-solving in a single step, using the Gemini LLM. The problem is approached holistically, with the agent reasoning about the question and passage to formulate an answer and extracting relevant numerical quantities, and then uses a verification step to determine the validity of the answer. The `HolisticReadingArithmeticReasoner` class contains the `answer_question` and `_reason_about_question` functions to provide the answer and reasoning, and `call_llm` sends prompts to the Gemini LLM. The `main` function initializes the `HolisticReadingArithmeticReasoner` and returns the answer to the question."
  },
  {
    "iteration": 11,
    "strategy": "Exploration",
    "accuracy": 0.8,
    "approach": "The script employs a \"Question Clarification & Focused Extraction\" approach, using LLMs to clarify a given question, extract relevant information, and synthesize an answer. The problem is decomposed into three main steps: question clarification, information extraction, and answer synthesis, each using the `call_llm` function with specific system instructions to act as an expert in that step. The `clarify_question` and `extract_information` functions include a verification step to ensure the validity of the LLM's output. The overall workflow is: `main` calls `clarify_question`, then `extract_information`, and finally `synthesize_answer`, using `call_llm` in each to interact with the LLM."
  },
  {
    "iteration": 12,
    "strategy": "Exploitation",
    "accuracy": 0.6,
    "approach": "The script solves a question by decomposing it into sub-questions, extracting relevant information, and synthesizing an answer, using the Gemini LLM for each step with a chain-of-thought approach and validation at each stage. It uses the `decompose_question`, `extract_information`, and `synthesize_answer` functions sequentially, each acting as a distinct agent role (question decomposer, information extractor, and answer synthesizer, respectively) and validating their results with an LLM before proceeding. The `call_llm` function is used to interact with the Gemini model, and the main function orchestrates the overall workflow."
  },
  {
    "iteration": 13,
    "strategy": "Exploitation",
    "accuracy": 0.7,
    "approach": "The script uses chain-of-thought reasoning with LLMs to answer questions by decomposing them into sub-questions, extracting relevant information, and synthesizing a final answer. Each step involves a dedicated LLM agent (question decomposer, information extraction expert, and answer synthesis expert) that uses examples to guide the reasoning process. Each step also uses verification to ensure that the produced output is valid. The functions `decompose_question`, `extract_information`, and `synthesize_answer` orchestrate these steps, calling `call_llm` to interact with the Gemini model with specific prompts and system instructions. The overall workflow involves decomposing the initial question, extracting information related to sub-questions, and synthesizing these extractions into a complete final answer."
  },
  {
    "iteration": 14,
    "strategy": "Exploitation",
    "accuracy": 0.6,
    "approach": "The script implements a question-answering system using chain-of-thought reasoning, where the problem is decomposed into sub-questions, information extraction, and answer synthesis. It employs three distinct agent roles: a question decomposer, an information extraction expert, and an answer synthesis expert, each responsible for a specific stage of the process. The functions `decompose_question`, `extract_information`, and `synthesize_answer` use the `call_llm` function to interact with the LLM, and each function also validates its results with the LLM before proceeding to the next stage. The overall workflow involves decomposing the initial question, extracting relevant information to answer sub-questions, synthesizing these answers into a final response, and then returning the final answer."
  },
  {
    "iteration": 15,
    "strategy": "Exploitation",
    "accuracy": 0.7,
    "approach": "The script solves a question by decomposing it into sub-questions, extracting relevant information to answer them, and synthesizing a final answer, using chain-of-thought prompting with examples. Each stage (decomposition, extraction, synthesis) uses a specific LLM agent role and validates the output using another LLM call. The workflow involves `main` calling `decompose_question`, then `extract_information`, then `synthesize_answer`; each of these functions calls `call_llm` to interact with the LLM and also validate the response from the LLM."
  },
  {
    "iteration": 16,
    "strategy": "Exploration",
    "accuracy": 0.8,
    "approach": "The script implements a \"Dual Verification with Iterative Refinement\" approach to answer questions using LLMs by decomposing the problem into question/answer pairs. It uses an \"information extraction expert\" and an \"answer synthesis expert\". The process involves three main steps: `decompose_question_answer` to create question/answer pairs, `extract_information` to retrieve relevant information based on these pairs, and `synthesize_answer` to generate the final answer, with each step including a verification stage. Each of these functions uses the `call_llm` function in order to prompt the LLM and retrieve a response."
  },
  {
    "iteration": 17,
    "strategy": "Exploitation",
    "accuracy": 0.8,
    "approach": "The script implements a multi-step approach to answer questions using chain-of-thought reasoning, question decomposition and answer synthesis. It decomposes the main question into sub-questions, extracts relevant information for each sub-question, and then synthesizes the extracted information to form a final answer.  The agent roles are expert question decomposer, information extraction expert, and answer synthesis expert. The script uses `decompose_question`, `extract_information`, and `synthesize_answer`, each calling `call_llm` to interact with the Gemini model and each using a verification step. The overall workflow is: question decomposition -> information extraction -> answer synthesis, with each step validated by the LLM and retried if needed."
  },
  {
    "iteration": 18,
    "strategy": "Exploitation",
    "accuracy": 0.0,
    "approach": "The script uses a chain-of-thought approach to answer questions by decomposing them into sub-questions, extracting relevant information, and synthesizing a final answer. It leverages LLMs with specific roles (question decomposer, information extraction expert, answer synthesis expert) at each stage, and includes verification steps to ensure validity. The core functions are `decompose_question` (breaks down the initial question), `extract_information` (gathers relevant data based on sub-questions), `synthesize_answer` (creates the final answer), and `call_llm` (interacts with the Gemini model). The overall workflow involves decomposing the question, extracting information related to the sub-questions, and then synthesizing these details into a comprehensive answer, with validation checks at each step to ensure accuracy."
  }
]

        COMMON ERROR PATTERNS:
        []

        PRIMARY ISSUES (last 3 iterations):
        [
  {
    "iteration": 9,
    "issue": "The primary issue is the **consistent off-by-one arithmetic errors** specifically in calculating the difference between two dates or years. This indicates a need for more robust and tested arithmetic functions."
  },
  {
    "iteration": 10,
    "issue": "The primary issue is the system's failure to accurately calculate the number of months between two specific dates mentioned in the passage, even with the information explicitly provided. This indicates a weakness in the system's temporal reasoning capabilities."
  },
  {
    "iteration": 11,
    "issue": "The most critical problem is the system's inability to accurately identify the subject of the action \"seizing power\" from the text. The system can identify that someone seized power, but grabs the wrong person as being the target."
  },
  {
    "iteration": 12,
    "issue": "The primary issue is the system's lack of robust temporal reasoning capabilities, leading to incorrect answers when questions require understanding the order of events or specific dates within the passage."
  },
  {
    "iteration": 13,
    "issue": "The primary issue is the system's **inability to perform precise contextual reasoning and constraint handling when numerical answers are needed**. It struggles to connect related pieces of information, apply constraints to filter out irrelevant information, and give accurate numerical answers without rounding or formatting errors."
  },
  {
    "iteration": 14,
    "issue": "The most critical problem is the system's inability to accurately extract and filter information based on multiple conditions and perform accurate arithmetic calculation based on this information. Specifically, when a question requires combining information extraction with even simple arithmetic operations, the system tends to fail."
  },
  {
    "iteration": 15,
    "issue": "The single most critical problem is the inaccurate extraction of numerical values relevant to answering questions that require mathematical operations such as finding the difference between values, or calculating percentages. The accurate identification of what values to compare/operate on is key."
  },
  {
    "iteration": 16,
    "issue": "The primary issue is the system's tendency to over-generate potential answers by listing *all* instances it can find in the passage related to the question, instead of filtering down to the *specific* information being requested by the question. This over-generation leads to answers that are too broad and include irrelevant or redundant details, failing to address the core query precisely."
  },
  {
    "iteration": 17,
    "issue": "The most critical problem is the system's failure to apply precise constraints when extracting information, resulting in over-inclusive answers that contain correct elements but also irrelevant or incorrect information. It tends to identify relevant entities but fails to filter them according to the specific nuanced requirements of the question."
  },
  {
    "iteration": 18,
    "issue": "The most critical problem is the **inability to configure and connect to the Gemini API**. This prevents the system from performing any question decomposition and, consequently, any question answering."
  }
]

        TARGETED IMPROVEMENTS:
        [
  "Prompt Engineering:** Use prompt engineering to explicitly ask the LLM to extract all relevant numbers and their corresponding units and then perform the calculation. For example: \"Extract all numbers corresponding to the entities and their units. What arithmetic operations should be performed to arrive at the answer? Perform the calculation and give the final answer.\"",
  "Enhance Reasoning Chain for Temporal Questions:** When the question involves time-related calculations, force the system to explicitly state the start date, end date, and the steps used to calculate the time difference. This will allow for easier debugging.",
  "Implement Date Parsing and Calculation:** Integrate a robust date parsing library to accurately extract date information from the passage. Then, use built-in date difference functions (e.g., from the `datetime` module in Python) to calculate the exact number of months between the dates.",
  "Introduce Contrastive Learning:** Train the system using contrastive learning techniques, where it's presented with pairs of similar questions that require different answers. This will help the system learn to differentiate between subtle nuances in question wording.",
  "Implement more print statements:** Add more print statements, especially when numerical computations are performed, so that one can track how numerical data and question data is extracted and utilized by the AI system.",
  "Refine Question Parsing:** Implement more sophisticated techniques for question parsing, including dependency parsing, semantic role labeling, and question type classification. This will enable the system to better understand the relationships between words and phrases in the question.",
  "Add Unit Tests Focused on Time-Based Reasoning:** Create a suite of unit tests specifically designed to test the system's temporal reasoning capabilities, including questions that require calculating time differences in days, weeks, months, and years.",
  "Add Temporal Reasoning Module:** Implement a dedicated module for temporal reasoning that can handle date calculations, time intervals, and event ordering.",
  "Implement Semantic Similarity Measures:** Utilize semantic similarity metrics (e.g., word embeddings, sentence embeddings) to compare the question with different parts of the passage. This will help the system identify the most relevant information and avoid focusing on irrelevant details.",
  "Answer type classification:** Before generating the final answer, classify the question based on the expected answer type (e.g., numerical, descriptive, boolean). Use this classification to guide the answer generation process. For example, if the expected answer type is numerical, prioritize extracting numbers and performing calculations."
]
        

EXAMPLE OF EFFECTIVE LLM USAGE PATTERNS:

```python
def extract_information_with_examples(text):
    """Extract key information from the input text using embedded examples."""
    system_instruction = "You are an information extraction specialist focusing on identifying key entities and relationships."
    
    prompt = f"""
    Extract key information from this text. Focus on identifying all entities, relationships, and important attributes.
    
    Example usage:
    
    Input Text:
    The company XYZ Corp reported quarterly earnings of $3.5 million, which represents a 12% increase from last year. The CEO, Jane Smith, attributed this growth to their new product line launched in March, which has already captured 8% of the market share. They expect to expand their operations to Europe by Q2 2023.
    
    Let's think step by step.
    
    The key entities are:
    - XYZ Corp (company)
    - Jane Smith (person, CEO)
    - New product line (product)
    
    The key information points are:
    - Financial: Quarterly earnings of $3.5 million
    - Performance: 12% increase from previous year
    - Product: New product line launched in March
    - Market: 8% market share for new product
    - Plans: Expansion to Europe by Q2 2023
    
    Extracted Information:
    {{
      "entities": [
        {{"name": "XYZ Corp", "type": "company"}},
        {{"name": "Jane Smith", "type": "person", "role": "CEO"}},
        {{"name": "New product line", "type": "product", "launch_date": "March"}}
      ],
      "financial_data": {{
        "quarterly_earnings": "$3.5 million",
        "growth_rate": "12%"
      }},
      "market_data": {{
        "product_market_share": "8%"
      }},
      "future_plans": [
        {{"type": "expansion", "region": "Europe", "timeline": "Q2 2023"}}
      ]
    }}
    
    Now, extract information from this new text:
    {text}
    """
    
    return call_llm(prompt, system_instruction)
```

```python
def verify_solution_with_examples(problem, proposed_solution):
    """Verify if the proposed solution satisfies all requirements using embedded examples."""
    system_instruction = "You are a critical evaluator who verifies if solutions correctly address problems."
    
    prompt = f"""
    Verify if this proposed solution correctly addresses all aspects of the problem.
    
    Example usage:
    
    Problem:
    Design a data structure that can efficiently perform the following operations:
    1. Insert a value
    2. Delete a value
    3. Get a random value with equal probability for all stored values
    All operations should have average time complexity of O(1).
    
    Proposed Solution:
    I'll use a combination of a hashmap and an array. The hashmap will store the value as the key and its index in the array as the value. The array will store all the inserted values.
    
    For insert: Add the value to the end of the array and update the hashmap with the value and its index. O(1) time.
    
    For delete: Look up the index of the value in the hashmap, swap the value with the last element in the array, update the hashmap for the swapped element, remove the last element from the array, and remove the value from the hashmap. O(1) time.
    
    For get random: Generate a random index within the array's bounds and return the value at that index. O(1) time.
    
    Verification:
    Let me check each requirement:
    1. Insert operation: The solution adds the value to the end of the array and updates the hashmap with O(1) time complexity ✓
    2. Delete operation: The solution uses the hashmap to find the index, then swaps with the last element and updates accordingly with O(1) time complexity ✓
    3. Get random operation: The solution generates a random index within the array bounds with O(1) time complexity ✓
    4. All operations have O(1) average time complexity ✓
    
    Result: VALID - The solution correctly addresses all requirements with the specified time complexity.
    
    Problem:
    {problem}
    
    Proposed Solution:
    {proposed_solution}
    
    Verification:
    """
    
    return call_llm(prompt, system_instruction)
```

```python
def solve_with_validation_loop(problem, max_attempts=3):
    """Solve a problem with iterative refinement through validation feedback loop."""
    system_instruction_solver = "You are an expert problem solver who creates detailed, correct solutions."
    system_instruction_validator = "You are a critical validator who carefully checks solutions against all requirements."
    
    # Initial solution generation
    solution_prompt = f"""
    Provide a detailed solution to this problem. Be thorough and ensure you address all requirements.
    
    Problem:
    {problem}
    """
    
    solution = call_llm(solution_prompt, system_instruction_solver)
    
    # Validation loop
    for attempt in range(max_attempts):
        # Validate the current solution
        validation_prompt = f"""
        Carefully validate if this solution correctly addresses all aspects of the problem.
        If the solution is valid, respond with "VALID: [brief reason]".
        If the solution has any issues, respond with "INVALID: [detailed explanation of issues]".
        
        Problem:
        {problem}
        
        Proposed Solution:
        {solution}
        """
        
        validation_result = call_llm(validation_prompt, system_instruction_validator)
        
        # Check if solution is valid
        if validation_result.startswith("VALID:"):
            return solution
        
        # If invalid, refine the solution
        refined_prompt = f"""
        Your previous solution to this problem has some issues that need to be addressed.
        
        Problem:
        {problem}
        
        Your previous solution:
        {solution}
        
        Validation feedback:
        {validation_result}
        
        Please provide a completely revised solution that addresses all the issues mentioned.
        """
        
        solution = call_llm(refined_prompt, system_instruction_solver)
    
    return solution
```

```python
def multi_perspective_analysis(problem):
    """Analyze a problem from multiple specialized perspectives and synthesize the insights."""
    # Define specialized analysis functions
    def analyze_factual_content(problem):
        system_instruction = "You are a factual analyst who focuses on identifying key facts and data points."
        prompt = f"""
        Analyze this problem for factual content only. Identify explicit facts, constraints, and requirements.
        
        Problem:
        {problem}
        """
        return call_llm(prompt, system_instruction)
    
    def analyze_structure(problem):
        system_instruction = "You are a structural analyst who specializes in problem organization and patterns."
        prompt = f"""
        Analyze the structure of this problem. Identify its components, relationships, and patterns.
        
        Problem:
        {problem}
        """
        return call_llm(prompt, system_instruction)
    
    # Execute parallel analyses
    factual_analysis = analyze_factual_content(problem)
    structural_analysis = analyze_structure(problem)
    
    # Synthesize the results
    synthesis_prompt = f"""
    Synthesize these two different analyses of the same problem into a comprehensive understanding.
    
    Factual Analysis:
    {factual_analysis}
    
    Structural Analysis:
    {structural_analysis}
    
    Provide a unified analysis that leverages both perspectives.
    """
    
    return call_llm(synthesis_prompt, "You are an insight synthesizer who combines multiple analyses.")
```

```python
def best_of_n_approach(problem, n=3):
    """Generate multiple solutions and select the best one based on a quality evaluation."""
    system_instruction_solver = "You are an expert problem solver who provides detailed, correct solutions."
    system_instruction_evaluator = "You are a quality evaluator who assesses solutions based on correctness, completeness, and clarity."
    
    # Generate n different solutions
    solutions = []
    for i in range(n):
        diversity_factor = f"Solution approach {i+1}/{n}: Use a different perspective from previous solutions."
        solution_prompt = f"""
        Provide a detailed solution to this problem.
        {diversity_factor if i > 0 else ""}
        
        Problem:
        {problem}
        """
        
        solutions.append(call_llm(solution_prompt, system_instruction_solver))
    
    # Evaluate each solution
    evaluations = []
    for i, solution in enumerate(solutions):
        evaluation_prompt = f"""
        Evaluate this solution on correctness, completeness, and clarity (1-10 scale).
        
        Problem:
        {problem}
        
        Solution {i+1}:
        {solution}
        
        Provide your evaluation as a JSON with scores and explanation.
        """
        
        evaluations.append(call_llm(evaluation_prompt, system_instruction_evaluator))
    
    # Find the best solution
    comparison_prompt = f"""
    Compare these solutions and their evaluations. Select the best one.
    
    Problem:
    {problem}
    
    {["Solution " + str(i+1) + ": " + solutions[i] + "\n\nEvaluation: " + evaluations[i] for i in range(n)]}
    
    Which solution is best? Respond with the solution number and explanation.
    """
    
    best_solution_index = int(call_llm(comparison_prompt, "You are a solution selector.").split()[1]) - 1
    return solutions[best_solution_index]
```

```python
def solve_with_react_pattern(problem):
    """Solve problems through iterative Reasoning and Acting (ReAct) approach."""
    system_instruction = "You are a problem-solving agent that follows the ReAct pattern: Reason about the current state, take an Action, observe the result, and repeat until reaching a solution."
    
    # Initialize ReAct process
    prompt = f"""
    Solve this problem using the ReAct pattern - alternate between Reasoning and Acting until you reach a final answer.
    
    Example usage:
    
    Problem: What is the capital of the country where the Great Barrier Reef is located, and what is the population of that capital?
    
    Thought 1: I need to determine which country the Great Barrier Reef is in, then find its capital, and finally the population of that capital.
    Action 1: Search[Great Barrier Reef location]
    Observation 1: The Great Barrier Reef is located off the coast of Queensland in northeastern Australia.
    
    Thought 2: Now I know the Great Barrier Reef is in Australia. I need to find Australia's capital city.
    Action 2: Search[capital of Australia]
    Observation 2: The capital of Australia is Canberra.
    
    Thought 3: Now I need to find the population of Canberra.
    Action 3: Search[population of Canberra]
    Observation 3: As of 2021, the population of Canberra is approximately 431,500.
    
    Thought 4: I have found all the required information. The capital of Australia (where the Great Barrier Reef is located) is Canberra, and its population is approximately 431,500.
    Action 4: Finish[The capital of Australia is Canberra, with a population of approximately 431,500.]
    
    Now solve this new problem:
    {problem}
    
    Start with Thought 1:
    """
    
    # Initial reasoning and action planning
    react_response = call_llm(prompt, system_instruction)
    
    # Extract the action from the response
    action = extract_action(react_response)
    
    # Continue the ReAct loop until we reach a "Finish" action
    while not action["type"] == "Finish":
        # Perform the requested action and get an observation
        if action["type"] == "Search":
            observation = perform_search(action["query"])
        elif action["type"] == "Calculate":
            observation = perform_calculation(action["expression"])
        elif action["type"] == "Lookup":
            observation = perform_lookup(action["term"])
        else:
            observation = f"Unknown action type: {action['type']}"
        
        # Continue the ReAct process with the new observation
        continuation_prompt = f"""
        {react_response}
        Observation {action["step_number"]}: {observation}
        
        Continue with the next thought and action:
        """
        
        # Get the next reasoning step and action
        react_response += "\n" + call_llm(continuation_prompt, system_instruction)
        
        # Extract the next action
        action = extract_action(react_response)
    
    # Extract the final answer from the Finish action
    final_answer = action["answer"]
    return final_answer

def extract_action(text):
    """Parse the ReAct response to extract the current action."""
    # Find the last action in the text
    action_matches = re.findall(r"Action (\d+): (\w+)\[(.*?)\]", text)
    if not action_matches:
        return {"type": "Error", "step_number": 0, "query": "No action found"}
    
    # Get the most recent action
    last_action = action_matches[-1]
    step_number = int(last_action[0])
    action_type = last_action[1]
    action_content = last_action[2]
    
    # Handle different action types
    if action_type == "Finish":
        return {"type": "Finish", "step_number": step_number, "answer": action_content}
    elif action_type in ["Search", "Lookup", "Calculate"]:
        return {"type": action_type, "step_number": step_number, "query": action_content}
    else:
        return {"type": "Unknown", "step_number": step_number, "query": action_content}

def perform_search(query):
    """Simulate a search action in the ReAct pattern."""
    # In a real implementation, this would call an actual search API
    return call_llm(f"Provide a factual answer about: {query}", "You are a helpful search engine that provides concise, factual information.")

def perform_calculation(expression):
    """Perform a calculation action in the ReAct pattern."""
    try:
        # Safely evaluate the expression
        result = eval(expression, {"__builtins__": {}}, {"math": math})
        return f"The result is {result}"
    except Exception as e:
        return f"Error in calculation: {str(e)}"

def perform_lookup(term):
    """Simulate a lookup action for specific information."""
    # In a real implementation, this would query a knowledge base or database
    return call_llm(f"Provide specific information about: {term}", "You are a knowledge base that provides specific factual information.")
```MULTI-EXAMPLE PROMPTING GUIDANCE:
        1. CRITICAL: Use MULTIPLE examples (2-5) in EVERY LLM prompt, not just one
        2. Vary the number of examples based on task complexity - more complex tasks need more examples
        3. Select diverse examples that showcase different patterns and edge cases
        4. Structure your few-shot examples to demonstrate clear step-by-step reasoning
        5. Consider using both "easy" and "challenging" examples to help the LLM learn from contrasts
        6. The collection of examples should collectively cover all key aspects of the problem
        7. When available, use examples from previous iterations that revealed specific strengths or weaknesses.
        8. USE REAL EXAMPLES FROM THE DATASET WHERE POSSIBLE!!

        Example of poor single-example prompting:
        ```python
        def extract_entities(text):
            prompt = f'''
            Extract entities from this text.

            Example:
            Text: John will meet Mary at 3pm on Tuesday.
            Entities: {{"people": ["John", "Mary"], "time": "3pm", "day": "Tuesday"}}

            Text: {text}
            Entities:
            '''
            return call_llm(prompt)
        ```

        Example of effective multi-example prompting:
        ```python
        def extract_entities(text):
            prompt = f'''
            Extract entities from this text.

            Example 1:
            Text: John will meet Mary at 3pm on Tuesday.
            Entities: {{"people": ["John", "Mary"], "time": "3pm", "day": "Tuesday"}}

            Example 2:
            Text: The team needs to submit the report by Friday at noon.
            Entities: {{"people": ["the team"], "time": "noon", "day": "Friday", "object": "report"}}

            Example 3:
            Text: Alex cannot attend the conference from Jan 3-5 due to prior commitments.
            Entities: {{"people": ["Alex"], "event": "conference", "date_range": ["Jan 3-5"], "reason": "prior commitments"}}

            Text: {text}
            Entities:
            '''
            return call_llm(prompt)
        ```

        === DIRECT LLM REASONING APPROACH ===

        CRITICAL: Previous scripts have shown that complex code generation with JSON parsing and multi-step pipelines often 
        leads to errors and low performance. Instead, focus on leveraging the LLM's natural reasoning abilities:

        1. SIMPLIFY YOUR APPROACH:
           - Minimize the number of processing steps - simpler is better
           - Directly use LLM for pattern recognition rather than writing complex code
           - Avoid trying to parse or manipulate JSON manually - pass it as text to the LLM

        2. DIRECT TRANSFORMATION:
           - Instead of trying to extract features and then apply them, use the LLM to do the transformation directly
           - Use examples to teach the LLM the pattern, then have it apply that pattern to new inputs
           - Avoid attempting to write complex algorithmic solutions when pattern recognition will work better

        3. ROBUST ERROR HANDLING:
           - Include multiple approaches in case one fails (direct approach + fallback approach)
           - Use simple validation to check if outputs are in the expected format
           - Include a last-resort approach that will always return something valid

        4. AVOID COMMON PITFALLS:
           - Do NOT attempt to use json.loads() or complex JSON parsing - it often fails
           - Do NOT create overly complex Python pipelines that require perfect indentation
           - Do NOT create functions that generate or execute dynamic code
           - Do NOT create unnecessarily complex data transformations

        5. SUCCESSFUL EXAMPLES:
           - The most successful approaches have used direct pattern matching with multiple examples
           - Scripts with simple validation and fallback approaches perform better
           - Scripts with fewer processing steps have higher success rates
        
        IMPLEMENTATION STRATEGIES:
        1. Maintain a "example bank" of successful and failed examples to select from
        2. Implement n-shot prompting with n=3 as default, but adapt based on performance
        3. For complex tasks, use up to 5 examples; for simpler tasks, 2-3 may be sufficient
        4. Include examples with a range of complexity levels, rather than all similar examples



        VALIDATION AND VERIFICATION GUIDANCE:
        1. CRITICAL: Consider implementing validation loops for EACH key processing step, not just final outputs
        2. Design your system to detect, diagnose, and recover from specific errors. This will help future learnings
        3. For every LLM extraction or generation, add a verification step that checks:
           - Whether the output is well-formed and complete
           - Whether the output is logically consistent with the input
           - Whether all constraints are satisfied
        4. Add feedback loops that retry failures with specific feedback
        5. Include diagnostic outputs that reveal exactly where failures occur. Add print statements and intermediate outputs such that you can see them later to determine why things are going wrong.
        6. Include capability to trace through execution steps to identify failure points

        Example of pipeline without verification:
        ```python
        def process_question(question):
            entities = extract_entities(question)
            constraints = identify_constraints(question)
            solution = generate_solution(entities, constraints)
            return solution
        ```

        Example of robust pipeline with verification:
        ```python
        def process_question(question, max_attempts=3):
            # Step 1: Extract entities with verification
            entities_result = extract_entities_with_verification(question)
            if not entities_result.get("is_valid"):
                print(f"Entity extraction failed: {entities_result.get('validation_feedback')}")
                return f"Error in entity extraction: {entities_result.get('validation_feedback')}"

            # Step 2: Identify constraints with verification
            constraints_result = identify_constraints_with_verification(question, entities_result["entities"])
            if not constraints_result.get("is_valid"):
                print(f"Constraint identification failed: {constraints_result.get('validation_feedback')}")
                return f"Error in constraint identification: {constraints_result.get('validation_feedback')}"

            # Step 3: Generate solution with verification
            solution_result = generate_solution_with_verification(
                question, 
                entities_result["entities"], 
                constraints_result["constraints"]
            )
            if not solution_result.get("is_valid"):
                print(f"Solution generation failed: {solution_result.get('validation_feedback')}")
                return f"Error in solution generation: {solution_result.get('validation_feedback')}"

            return solution_result["solution"]

        def extract_entities_with_verification(question, max_attempts=3):
            #Extract entities and verify their validity with feedback loop.
            system_instruction = "You are an expert at extracting and validating entities."

            for attempt in range(max_attempts):
                # First attempt at extraction
                extraction_prompt = f'''
                Extract key entities from this question. 
                Return a JSON object with the extracted entities.

                Example 1: [example with entities]
                Example 2: [example with different entities]
                Example 3: [example with complex entities]

                Question: {question}
                Extraction:
                '''

                extracted_data = call_llm(extraction_prompt, system_instruction)

                try:
                    # Parse the extraction
                    data = json.loads(extracted_data)

                    # Verification step
                    verification_prompt = f'''
                    Verify if these extracted entities are complete and correct:

                    Question: {question}
                    Extracted entities: {json.dumps(data, indent=2)}

                    Check if:
                    1. All relevant entities are extracted
                    2. No irrelevant entities are included
                    3. All entity values are correct

                    Return a JSON with:
                    {{
                      "is_valid": true/false,
                      "validation_feedback": "detailed explanation",
                      "missing_entities": ["entity1", "entity2"],
                      "incorrect_entities": ["entity3"]
                    }}
                    '''

                    verification_result = call_llm(verification_prompt, system_instruction)
                    verification_data = json.loads(verification_result)

                    if verification_data.get("is_valid", False):
                        data["is_valid"] = True
                        data["validation_feedback"] = "All entities are valid."
                        return data

                    # If not valid and we have attempts left, refine with feedback
                    if attempt < max_attempts - 1:
                        feedback = verification_data.get("validation_feedback", "")
                        print(f"Validation failed (attempt {attempt+1}/{max_attempts}): {feedback}")
                        continue

                    # If we're out of attempts, return the best we have with validation info
                    data["is_valid"] = False
                    data["validation_feedback"] = verification_data.get("validation_feedback", "Unknown validation error")
                    return data

                except Exception as e:
                    print(f"Error in extraction/validation (attempt {attempt+1}/{max_attempts}): {str(e)}")
                    if attempt >= max_attempts - 1:
                        return {
                            "is_valid": False,
                            "validation_feedback": f"Error during processing: {str(e)}"
                        }

            return {
                "is_valid": False,
                "validation_feedback": "Failed to extract valid entities after multiple attempts."
            }
        ```

        VALIDATION IMPLEMENTATION STRATEGIES:
        1. Create detailed verification functions for each major processing step
        2. Implement max_attempts limits on all retry loops (typically 3-5 attempts)
        3. Pass specific feedback from verification to subsequent retry attempts
        4. Log all verification failures to help identify systemic issues
        5. Design fallback behaviors when verification repeatedly fails

        

            
        ACCUMULATED LEARNINGS FROM PREVIOUS ITERATIONS:
        ```
# DATASET-SPECIFIC LEARNINGS & EXPERIMENT LOG

This document tracks our evolving understanding and experimental findings related to the question answering task on the current dataset. It serves as a long-term memory to guide future research and development efforts.

## 1. DATASET PATTERNS & CHARACTERISTICS

*   **General:**
    *   The dataset consists of passages describing events (primarily American football games or political events), followed by fact-based questions requiring information retrieval directly from the passage. No external knowledge is needed.
    *   Questions often involve numerical reasoning (arithmetic, comparisons), general knowledge application, and date/time calculations.
    *   Passages can be lengthy, requiring careful reading. Case sensitivity is observed.
    *   Questions often involve comparing or relating two or more pieces of information in the passage, frequently asking for numerical information (quantities, dates, names), requiring precise extraction and comparison.
    *   Passages often present multiple entities or events; questions require distinguishing between them and relating correct information.
    *   Questions may require synthesizing information from multiple sentences or inferring from disparate facts.
    *   Many questions involve interpreting percentages or proportions, requiring correct identification of the base number.
    *   Questions often test the understanding of specific terminology within the passage's context.
    *   The dataset presents questions that require **numerical reasoning and contextual linking**. Many questions ask for percentage differences or values derived from information spread across sentences.
    *   Questions frequently involve **extracting and comparing numerical values**. The system needs to identify the correct numerical values from the passage and perform arithmetic operations.
    *   The dataset contains questions where the **answer is not explicitly stated** but requires inferential reasoning based on the context provided in the passage. Sometimes the answer can't be found in the text.
    *   **Complex Reasoning:** The questions frequently require integrating information from multiple parts of the passage, going beyond simple fact retrieval.

*   **Sports Context:** The dataset heavily features sports passages, often game recaps or summaries. The questions frequently ask about specific numerical details like yardage, scores, or player statistics. Passages are dense with numbers, requiring precise parsing. Basic sports terminology (football positions, scoring) is needed. Questions about sports narratives can induce errors because they require understanding of event order and accurate extraction of details.
    *   Questions are primarily fact-retrieval based on a single passage of text describing a sports game (American football).
    *   Questions frequently ask about specific players and their actions during the game (e.g., who scored, who intercepted, how many points).

*   **Multiple Relevant Instances:** Questions often implicitly require the model to identify *all* instances of a particular event or object within the passage (e.g., "What yard line did both teams score from?").
*   **Implicit Comparisons/Filters:** Some questions demand the model to perform a calculation (e.g., difference, sum) or filter based on a condition after extracting information (e.g., "How many more households were there with couples married without children than households married with children?").

*   **Entity Relationship Extraction:**
    *   The dataset presents questions requiring identifying relationships between entities within a passage. The target relationship often involves actions (e.g., seizing power, causing casualties) and the entities involved (agent and target).
    *   Questions frequently require pinpointing the target/subject of an action, even when multiple related entities are mentioned in close proximity. This demands precise understanding of sentence structure and pronoun references. The model confuses the person who *preceded* the power seizure with the *victim* of the power seizure (e.g., confusing King William II of Sicily with Queen Joan). The system fails to correctly identify the subject of an action.
    *   The passages are concise, but contain sufficient detail that incorrect attribution is easy.

*   **Date/Time Reasoning:**
    *   A recurring pattern is the need to calculate durations (years, months, days) based on dates or time spans mentioned in the passage. This requires precise arithmetic and attention to inclusivity/exclusivity. A significant portion of the questions requires understanding and comparing dates and events described in the passage. The questions often ask "Which happened later?" or require calculating time differences. A recurring failure mode involves incorrect calculation of the number of months between two dates mentioned in the passage.
    *   **Temporal Reasoning:** Some questions require understanding and comparing events that occur at different times in the passage. Chronological order of events is important. Time-related keywords (e.g., "final," "first," "later," "second") help narrow the search.
    *   The passages contain a lot of temporal information (first quarter, second quarter, etc.) which is crucial for answering many of the questions.

*   **Explicit Information Retrieval:** The questions often require directly extracting and processing information explicitly stated in the passage.
*   **Numeric Answers:** Many questions seek numeric answers, making them easily verifiable but also sensitive to arithmetic errors.
*   **Question Structure:** All questions follow the format: `"PASSAGE:\n[passage text]\n\nQUESTION: [question text]"`. Many questions involve numerical reasoning and comparison.
*   **Answer Structure:** Answers are typically short phrases, numbers, or names.
*   **Passage Structure:** Passages vary in content (sports summaries, scientific descriptions like astronomy, political events). Passages are dense with numbers.
*   **Domain Knowledge:** General reading comprehension is crucial. For demographic examples, basic understanding of fertility rates is needed.
*   **Question Types:** Entity Extraction, Numerical Comparison, Counting.
*   **Reasoning Types:** Direct Extraction, Simple Arithmetic, Logical Deduction, Multi-Sentence Reasoning.
*   **Non-Obvious Patterns:** Chronological order of events is important. Time-related keywords help narrow the search.
*   **Edge Cases/Complexities:** Passages with ambiguous or contradictory information; questions requiring more complex arithmetic operations; questions with implicit rather than explicit answers; handling of units consistently.

## 2. EFFECTIVE TASK-SPECIFIC STRATEGIES

*   **Decompose, Extract, Synthesize:** A modular approach utilizing a question decomposer, information extraction expert, and answer synthesis expert shows promise.
*   **Chain-of-Thought Reasoning (CoT):** Improves interpretability, but effectiveness is limited by the system's ability to accurately understand the question's intent and extract relevant numerical data.
*   **Zero-Shot Reasoning:** Directly ask the LLM to answer the question based on the passage, using a well-crafted prompt.
*   **Question-Type Determination and Specialized Processing:** Determine the question type (numerical vs. general) and use specialized processing. Failure in question type determination renders the entire system useless.
*   **LLM-Driven Techniques with Verification:** Combining LLM-driven techniques with verification steps at each stage is a successful pattern. Verification is inadequate for semantic errors.
*   **Dual Verification with Iterative Refinement:** Appears promising, providing a solid base for improvement, but may be too sensitive and identifies a wide range of related answers.
*   **Dynamic Approach Selection:** Adapting the strategy based on the type of question being asked proves important.
*   **Validating intermediate steps:** Decomposition and extraction likely contributes to the overall accuracy.
*   **Providing examples in LLM prompts improves performance.**
*   **Explicitly prompting the LLM to show its work (intermediate calculations) helps in debugging.**
*   **Question Clarification & Focused Extraction:** Clarifying the question's intent before extraction *should* ideally improve precision.

## 3. COMMON FAILURE MODES ON THIS DATASET

*   **API Connectivity Failure:** Inability to connect to the Gemini API, preventing any processing.
*   **General Script Errors:** `NameError: name 'call_llm' is not defined`.
*   **Root Cause: Incorrect Question Type Determination:** The `determine_question_type()` function consistently returns an error.
*   **Temporal Reasoning Errors:** Incorrectly ordering events, calculating time differences, and making off-by-one errors in duration calculation. Misinterpretation of Inclusion/Exclusion. Difficulty determining the *first* or *last* instance of an event.
*   **Answer Synthesis Failure:** Inability to synthesize a valid answer, even when the correct information is extracted. Struggles to provide complete answers, especially when context, units, or modifiers are needed. Struggles to filter out irrelevant entities.
*   **Over-generation of Instances:** The "Dual Verification with Iterative Refinement" approach often retrieves *all* possible instances related to the question from the passage, even when not all are directly relevant. This leads to overly detailed and noisy answers. Inability to apply precise constraints during information extraction.
*   **Lack of Aggregation/Filtering:** The system struggles to perform necessary filtering or aggregation after extracting the information.
*   **Sports narrative complexity:** Requires understanding of event order and accurate extraction of details.
*   **Validation sensitivity:** Validation checks can be overly strict, but are still often insufficient.
*   **Information Extraction Failure:** Inaccurate or incomplete extracted information. Pulls *additional* correct information when only *specific* information is requested. Numerical extraction errors.
*   **Ambiguous Passages:** Passages with ambiguous or contradictory information.
*   **Missing Information:** If the answer cannot be found in the passage.
*   **Lack of Arithmetic Reasoning:** Inability to perform arithmetic operations, particularly simple addition.
*   **Calculation errors:** Performing incorrect arithmetic operations on extracted numbers.
*   **Synthesis errors:** Generating a response that is not a coherent or accurate answer to the question.
*   **Question type misclassification**.
*   **Unit Handling:** Lack of proper unit handling leads to incomplete or misinterpreted answers.
*   **Misinterpretation of Question Intent**.
*   **Incorrect Numerical Calculation.**
*   **Lack of Verification:** Lacks a final answer verification step to check the reasonableness of the answer.
*   **Numerical Extraction in Dense Passages:** Difficulty in accurately extracting numerical values and associating them with the correct entities.
*    **Incorrect Subject Identification:** The system fails to correctly identify the subject of an action.
*   **Proximity Bias:** The LLM seems to exhibit proximity bias, selecting entities mentioned closer to the action verb.
*   **Lack of Deep Understanding of Numerical Comparisons:** Appears to sometimes fail to associate the numbers with the correct context, leading to incorrect comparisons.
*   **Lack of "Who" Question Understanding:** The system does not appear to know how to resolve "who" questions.
*   **Semantic Equivalence:** Errors occur when the system gives an answer that is not semantically equivalent to the reference answer, for example, "Novgorod" vs "Novgorodians".
*   **Misinterpretation of context**.
*   **Incorrect extractions**.
*   **Incorrect formatting:** Added extra spaces in the answer.

## 4. EXPERIMENT LOG & FINDINGS

*   **2025-05-17 13:35:33: INITIAL DATASET ANALYSIS**: Comprehensive analysis of dataset characteristics, challenges, potential approaches, and implementation recommendations. Highlighted potential solution strategies: Keyword-Based Retrieval, LLM-Based Extraction & Reasoning, Hybrid Approach. Outlined decomposition steps: Question Analysis, Passage Filtering, Information Extraction, Answer Generation. Proposed validation techniques: Consistency Checks, Unit Analysis, Numerical Validation, Fact Verification. Prompt engineering techniques for effective text processing were proposed, including chain-of-thought prompting.
*   **ITERATION 0:** Accuracy: 0.67. Goal: Improve performance using question decomposition and reasoning. Finding: Question decomposition has challenges with reliable answer synthesis. Frequent validation failures indicate problems with downstream steps. Sports-related questions involving temporal reasoning pose significant challenges. Insight: Validation is helpful for diagnosing system performance, specifically highlighting failures in answer synthesis.
*   **ITERATION 1:** Accuracy: 1.00
*   **ITERATION 2:** Accuracy: 1.00. Goal: Improve performance using question-type determination and specialized processing. Finding: High accuracy suggests question-type determination followed by specialized processing is highly effective. Dynamic approach selection emphasizes the importance of adapting the strategy based on the type of question being asked. Caveat: The lack of error cases makes it impossible to determine the system's limitations definitively.
*   **ITERATION 3:** CoT is beneficial. Limitation: Lack of arithmetic reasoning capabilities. Individual role definitions for the LLMs (question decomposer, information extractor, answer synthesizer) needs more definition.
*   **ITERATION 4:** Accuracy: 1.0. Goal: Improve answer completeness, focusing on context, units, and modifiers. Achieving 1.0 accuracy suggests that the overall strategy of chain-of-thought, role-based agents, and validation is effective. The primary area for improvement is in the completeness and context of the final answer.
*   **ITERATION 5:** Chain-of-thought benefits are diminished by semantic errors in question interpretation. Verification steps are inadequate for addressing semantic errors.
*   **ITERATION 6:** Accuracy: 0.80. Goal: Improve semantic understanding and numerical reasoning by leveraging chain-of-thought, prompt examples, and showing work. Chain-of-thought with question decomposition, information extraction, and answer synthesis showed promise. Providing examples in LLM prompts seems to improve performance. Explicitly prompting the LLM to show its work (intermediate calculations) helped in debugging. Inconsistent and unreliable arithmetic calculations are a major failure mode. The LLM sometimes fails to correctly interpret or apply units. The system lacks a final answer verification step to check the reasonableness of the answer. Arithmetic and unit errors indicate a need for more robust numerical reasoning capabilities.
*   **ITERATION 7:** Accuracy: 0.0. Goal: Improve semantic understanding and numerical reasoning capabilities. This iteration provided no usable data due to the undefined `call_llm` function. The script is fundamentally broken without the `call_llm` function.
*   **ITERATION 8:** Accuracy: 0.0. Goal: Improve semantic understanding and numerical reasoning capabilities. The `determine_question_type()` function consistently failed, leading to a complete system failure. The question type determination module is a single point of failure.
*   **ITERATION 9:** Goal: Improve handling of date/time reasoning, specifically duration calculations. The "Reading Comprehension Expert" agent with self-debate, in its current form, is not robust enough to prevent common arithmetic errors, especially off-by-one errors in duration calculation. The agent's general reasoning capabilities are insufficient for accurate duration calculations. Self-Debate Alone Is Insufficient: The agent identifies the potential for errors but fails to consistently avoid them.
*   **ITERATION 10:** Accuracy: 0.80
*   **2025-05-17 20:26:38: SCRIPT ERROR:** Error detected during script repair (attempt 1): ERROR: Script requires external information to provide an answer.
*   **2025-05-17 20:26:49: SCRIPT ERROR:** Error detected during script repair (attempt 2): ERROR: No passage provided.
*   **ITERATION 11:** Accuracy: 0.80. Goal: Improve accuracy by clarifying the question's intent before information extraction. Clarifying the question isn't enough; the extraction phase needs to be more robust to identifying the correct entity related to a specific action. Failure Example: Incorrect subject identification. The LLM seems to exhibit proximity bias, selecting entities mentioned closer to the action verb.
*   **ITERATION 12:** Accuracy: 0.60. Goal: Improve performance with better handling of temporal and numerical reasoning by leveraging question decomposition and validation. Validation may be too simplistic and the final answer may still be wrong.
*   **ITERATION 13:** Accuracy: 0.70. Goal: Improve performance with an exploitation strategy with chain-of-thought reasoning. The use of examples in LLM prompts alone is insufficient to overcome the challenges of numerical reasoning and constraint application.
*   **ITERATION 14:** Accuracy: 0.60. Goal: Improve performance with an exploitation strategy with chain-of-thought reasoning. The chain-of-thought approach helps, but the individual components need to be more robust, especially in handling numerical data and conditional filtering. Failure Examples: "Billy Cundiff vs. Sebastian Janikowski" question: Incorrect identification of field goal lengths. "Countries on the 2014 Summer tour" question: Incorrect inclusion of "Germany" due to failure to properly filter based on the "more than one date" condition.
*   **ITERATION 15:** Accuracy: 0.70. Reliance on chain-of-thought prompting is not sufficient to guarantee accurate numerical extraction and calculation. Failure Examples: "How many more yards was Nate Kaeding's second field goal over his first?": The system extracted "27" instead of calculating the difference between 51 and 24. Semantic equivalence: Errors occur when the system gives an answer that is not semantically equivalent to the reference answer, for example, "Novgorod" vs "Novgorodians".
*   **ITERATION 16:** Accuracy: 0.80. The Dual Verification with Iterative Refinement approach appears promising but needs refinement to avoid over-generation of instances and improve aggregation/filtering.
*   **ITERATION 17:** Accuracy: 0.80. Exploitation strategy demonstrates the potential of the overall architecture. The high accuracy confirms the basic approach of question decomposition, information extraction, and answer synthesis is a viable strategy for this dataset. Improving the precision of the information extraction step is crucial for further improving performance. System identifies both players who intercepted passes, but the question implicitly or explicitly only asks for one (Over-inclusive Extraction).
*   **2025-05-17 20:47:28: SCRIPT ERROR:** Error detected during script repair (attempt 1): ERROR: Script failed due to missing attribute in google.genai module and question decomposition failure.
*   **2025-05-17 20:47:42: SCRIPT ERROR:** Error detected during script repair (attempt 2): ERROR: Gemini API call failed with 404 error, and question decomposition failed.
*   **2025-05-17 20:47:53: SCRIPT ERROR:** Error detected during script repair (attempt 3): ERROR: Unexpected keyword argument 'model' and failed question decomposition.
*   **ITERATION 18:** Due to the complete failure to connect to the LLM, no strategies were actually tested. The core failure stemmed from the inability to connect to and utilize the Gemini API. API failure resulted in a cascading failure; because question decomposition couldn't be performed, the entire pipeline halted.

## 5. NEXT RESEARCH DIRECTIONS

*   **Address API Connectivity immediately:**
    *   Verify API keys, authentication methods, and network configurations.
    *   Implement Robust Error Handling: Include more specific error handling and logging around the API call to immediately identify connectivity problems with descriptive error messages.
    *   Test API Connectivity Separately: Create a simple test to verify API connectivity.
    *   Fallback Mechanism: Consider a fallback mechanism (e.g., a local, smaller model) to provide a basic response in case of API failures.
*   **Address `call_llm` and `determine_question_type()` immediately:**
    *   **Define or import `call_llm` immediately.**
    *   **Critically, redesign/debug `determine_question_type()`.** Consider:
        *   **More examples:** Providing significantly more examples to the LLM prompt.
        *   **Simpler prompt:** Attempting a simpler prompt focused solely on question classification.
        *   **Fine-tuning:** Fine-tuning a smaller, specialized LLM on question type classification.
        *   **Direct few-shot classification:** Prompt the LLM to directly classify questions with a few examples without chain-of-thought.
    *   **Implement Validation & Fallback:** Add validation logic to `determine_question_type()` with a fallback mechanism.
*   **Refine Information Extraction with Strict Constraints:** Modify the `extract_information` function to incorporate more explicit constraints based on the sub-question being answered. This could involve adding more negative examples in the prompt, or using a more sophisticated filtering mechanism. The LLM needs to be better at determining which of the two players meets the *implicit* criteria in the question.
*   **Enhance Temporal Reasoning:** Explicitly incorporate temporal reasoning into the question decomposition and information extraction steps. When a question involves time, ensure the system identifies and uses relevant temporal clues from the passage to filter extracted information.
*   **Improve Verification Step:** Add specific checks to the verification prompts to explicitly ask if the answer is complete and contains no extraneous information.
*   **Introduce a Filtering/Selection Step:** Add a dedicated filtering/selection step *after* information extraction but *before* answer synthesis. This step would be responsible for applying the final constraints and selecting the most relevant information based on the question's requirements.
*   **Error Handling:** Implement better error handling throughout the system to provide more informative debugging messages.
*   **Analyze the results of the re-run. Focus on the accuracy of `determine_question_type`, `extract_numerical_info`, and `extract_information`.**
*   **If the above modules are problematic, refine the prompts used by `call_llm` within each of those functions, providing more examples specific to football game summaries and question types.**
*   **Improve Temporal Reasoning:** Implement explicit logic for handling dates and time periods. Fine-tune the LLM on a dataset specifically designed to improve temporal reasoning skills. Implement Dedicated Date/Time Arithmetic Functions & Formalize Inclusion/Exclusion Reasoning.
*   **Enhance Question Decomposition:** Modify the `decompose_question_answer` function to more explicitly identify implicit constraints or filters in the question. Prompt the LLM to identify keywords suggesting a need to return a *single* instance or an *aggregate*.
*   **Enhance Information Extraction Filtering:** In the `extract_information` function, add a post-processing step to filter the extracted instances based on the identified constraints. This might involve using a separate LLM call to rank or filter the extracted information based on its relevance to the specific question.
*   **Implement Explicit Aggregation:** For questions requiring aggregation, incorporate a dedicated aggregation step in the `synthesize_answer` function.
*   **Implement a dedicated numerical reasoning module:** Integrate a calculator or numerical reasoning tool to perform arithmetic operations.
*   **Add Unit Verification:** Implement a module that checks the predicted unit against the expected unit based on the question.
*   **Implement Answer Sanity Checks:** Add a final step to evaluate the answer for sanity.
*   **Enhance training examples for numerical and unit understanding:** Fine-tune the LLM with more examples that focus on numerical reasoning and unit conversions.
*   **Test on edge cases:** Create specific test cases that target potential arithmetic errors, incorrect unit handling, and misunderstanding of specific terminology.
*   **Enhance Semantic Understanding.**
*   **Improve Numerical Reasoning.**
*   **Refine Verification Strategies:** Adapt the verification steps to specifically target potential semantic errors. Enhance Semantic Validation. Refine the validation call to the LLM to include a more robust assessment of the semantic equivalence between the system and golden answers.
*   **Enhance the answer synthesis stage:** Modify the prompt for the answer synthesis agent to explicitly request that it include all relevant context, units, and modifiers from the original passage.
*   **Improve unit handling.**
*   **Post-processing for completeness.**
*   **Arithmetic Reasoning Module.**
*   **Refine Answer Synthesis Prompt.**
*   **Include Examples of Arithmetic Reasoning in Prompts.**
*   **Evaluate Different LLMs for Numerical Reasoning.**
*   **Answer Synthesis Improvement.**
*   **Refine Validation Logic.**
*   **Evaluate Information Extraction Success.**
*   **Dataset Split & Analysis.**
*   **Prompt Engineering.**
*   **Context Window Management.**
*   **Error Analysis.**
*   **External Knowledge Integration.**
*   **Introduce Complexity.**
*   **Introduce Unit Tests.**
*   **Verification specifically for temporal calculations.**
*   **Analyze successes.**
*   **Refine Extraction Prompts:** Modify the `extract_information` prompt to explicitly instruct the LLM to focus on identifying the *subject* of the action described in the question, not just any related entity. Include examples of correct and incorrect subject identification.
*   **Add Subject-Verb-Object Triplet Identification.**
*   **Improve Clarification of "Who" questions.**
*   **Implement a "reasoning chain".**
*   **Add more error examples.**
*   **Enhance Numerical Understanding and Comparison.**
*   **Refine Validation.**
*   **Address Quantifier Issues.**
*   **Enhance numerical reasoning capabilities.**
*   **Improve context understanding and constraint handling.**
*   **Improve the answer formatting.**
*   **Strengthen Information Extraction for Numerical Data.**
*   **Strengthen Calculation Logic.**
*   **Improve Conditional Filtering in Answer Synthesis.**
*   **Explicitly train on examples involving Arithmetic Reasoning.**
```
        

            
        CAPABILITY ASSESSMENT & IMPROVEMENT GUIDANCE:
        SYSTEM ANALYSIS & GUIDANCE


        

            TOP PERFORMING APPROACHES TO BUILD UPON:
            
TOP PERFORMING APPROACH #1:
Iteration: 1
Accuracy: 1.00
Approach Summary: The script uses a chain-of-thought approach with question decomposition and verification steps to answer a question. The problem is decomposed into sub-questions, then relevant information is extracted, and finally, an answer is synthesized. Three agent roles are used: question decomposer, information extraction expert, and answer synthesis expert, each implemented through specific prompts to the LLM. The functions used are `main` which orchestrates the process, `decompose_question` which breaks down the question, `extract_information` which gathers relevant information, `synthesize_answer` which formulates the final answer, and `call_llm` which interfaces with the Gemini API; these functions are called sequentially to solve the problem. The overall workflow is to decompose, extract, and synthesize, with validation steps at each stage to ensure correctness.

FULL SCRIPT TO REFINE:
```python
import os
import re

def main(question):
    """
    Solve the question by extracting relevant information from the passage and using chain-of-thought reasoning.
    This approach builds upon a prior attempt to use question decomposition, strengthens answer synthesis, and includes examples in all LLM prompts.
    """
    try:
        # Step 1: Decompose the question into sub-questions.
        decomposition_result = decompose_question(question)
        if not decomposition_result.get("is_valid"):
            return f"Error in question decomposition: {decomposition_result.get('validation_feedback')}"
        
        # Step 2: Extract relevant information based on sub-questions.
        information_extraction_result = extract_information(question, decomposition_result["sub_questions"])
        if not information_extraction_result.get("is_valid"):
            return f"Error in information extraction: {information_extraction_result.get('validation_feedback')}"

        # Step 3: Synthesize the answer from extracted information.
        answer_synthesis_result = synthesize_answer(question, information_extraction_result["extracted_info"])
        if not answer_synthesis_result.get("is_valid"):
            return f"Error in answer synthesis: {answer_synthesis_result.get('validation_feedback')}"
        
        return answer_synthesis_result["answer"]

    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"

def decompose_question(question, max_attempts=3):
    """Decompose the main question into smaller, answerable sub-questions."""
    system_instruction = "You are an expert question decomposer."
    
    for attempt in range(max_attempts):
        decomposition_prompt = f"""
        Decompose the given question into smaller, self-contained sub-questions that, when answered, will fully answer the original question.

        Example 1:
        Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Sub-questions:
        1. How many yards was Chris Johnson's first touchdown?
        2. How many yards was Jason Hanson's first field goal?
        3. What is the sum of those two values?

        Example 2:
        Question: Who caught the final touchdown of the game?
        Sub-questions:
        1. Who scored the final touchdown of the game?

        Question: {question}
        Sub-questions:
        """
        
        decomposition_result = call_llm(decomposition_prompt, system_instruction)
        
        # Verify if the decomposition is valid
        verification_prompt = f"""
        Verify if these sub-questions are valid and sufficient to answer the original question.

        Original Question: {question}
        Sub-questions: {decomposition_result}

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Sub-questions: 1. How many yards was Chris Johnson's first touchdown? 2. How many yards was Jason Hanson's first field goal? 3. What is the sum of those two values?
        Validation: Valid

        Is the decomposition valid and sufficient? Respond with 'Valid' or 'Invalid'.
        """
        
        verification_result = call_llm(verification_prompt, system_instruction)
        
        if "valid" in verification_result.lower():
            return {"is_valid": True, "sub_questions": decomposition_result}
        else:
            print(f"Decomposition validation failed (attempt {attempt+1}/{max_attempts}): {verification_result}")
            
    return {"is_valid": False, "validation_feedback": "Failed to decompose the question successfully."}

def extract_information(question, sub_questions, max_attempts=3):
    """Extract relevant information from the passage based on the sub-questions."""
    system_instruction = "You are an information extraction expert."
    
    for attempt in range(max_attempts):
        extraction_prompt = f"""
        Given the original question and its sub-questions, extract the relevant information from the passage required to answer the sub-questions.

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Sub-questions:
        1. How many yards was Chris Johnson's first touchdown?
        2. How many yards was Jason Hanson's first field goal?
        Extracted Information:
        Chris Johnson's first touchdown was 6 yards. Jason Hanson's first field goal was 53 yards.

        Original Question: {question}
        Sub-questions: {sub_questions}
        Extracted Information:
        """
        
        extracted_info = call_llm(extraction_prompt, system_instruction)
        
        # Validate information extraction
        verification_prompt = f"""
        Verify if the extracted information is relevant and sufficient to answer the sub-questions.

        Original Question: {question}
        Sub-questions: {sub_questions}
        Extracted Information: {extracted_info}

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Sub-questions: 1. How many yards was Chris Johnson's first touchdown? 2. How many yards was Jason Hanson's first field goal?
        Extracted Information: Chris Johnson's first touchdown was 6 yards. Jason Hanson's first field goal was 53 yards.
        Validation: Valid

        Is the extraction relevant and sufficient? Respond with 'Valid' or 'Invalid'.
        """
        
        verification_result = call_llm(verification_prompt, system_instruction)
        
        if "valid" in verification_result.lower():
            return {"is_valid": True, "extracted_info": extracted_info}
        else:
            print(f"Information extraction validation failed (attempt {attempt+1}/{max_attempts}): {verification_result}")
            
    return {"is_valid": False, "validation_feedback": "Failed to extract relevant information successfully."}

def synthesize_answer(question, extracted_info, max_attempts=3):
    """Synthesize the answer from the extracted information to answer the main question."""
    system_instruction = "You are an answer synthesis expert."

    for attempt in range(max_attempts):
        synthesis_prompt = f"""
        Given the original question and the extracted information, synthesize the final answer.

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Extracted Information: Chris Johnson's first touchdown was 6 yards. Jason Hanson's first field goal was 53 yards.
        Final Answer: 59

        Original Question: {question}
        Extracted Information: {extracted_info}
        Final Answer:
        """
        
        answer = call_llm(synthesis_prompt, system_instruction)

        # Answer checker
        verification_prompt = f"""
        Check if the answer is correct and answers the original question fully.

        Original Question: {question}
        Synthesized Answer: {answer}

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Synthesized Answer: 59
        Validation: Valid

        Is the answer correct and complete? Respond with 'Valid' or 'Invalid'.
        """
        
        verification_result = call_llm(verification_prompt, system_instruction)

        if "valid" in verification_result.lower():
            return {"is_valid": True, "answer": answer}
        else:
            print(f"Answer synthesis validation failed (attempt {attempt+1}/{max_attempts}): {verification_result}")
            
    return {"is_valid": False, "validation_feedback": "Failed to synthesize a valid answer."}

def call_llm(prompt, system_instruction=None):
    """Call the Gemini LLM with a prompt and return the response. DO NOT deviate from this example template or invent configuration options. This is how you call the LLM."""
    try:
        from google import genai
        from google.genai import types
        import os  # Import the os module

        # Initialize the Gemini client
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        # Call the API with system instruction if provided
        if system_instruction:
            response = client.models.generate_content(
                model="gemini-2.0-flash", 
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction
                ),
                contents=prompt
            )
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )

        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return f"Error: {str(e)}"
```

TOP PERFORMING APPROACH #2:
Iteration: 2
Accuracy: 1.00
Approach Summary: The script addresses question answering by first determining the question type and then processing it accordingly. Numerical questions are processed by extracting numerical information and calculating the answer, while general questions are addressed through question decomposition, information extraction, and answer synthesis. The agent roles are: question type identifier, numerical information extractor, calculator, question decomposer, information extraction expert, and answer synthesis expert. Key functions include `determine_question_type`, `process_numerical_question`, `extract_numerical_info`, `calculate_answer`, `process_general_question`, `decompose_question`, `extract_information`, `synthesize_answer`, and `call_llm`; these functions are chained together to process the question and generate an answer using LLM-driven techniques with verification steps at each stage. The overall workflow involves determining question type, processing the question using a type-specific method, and returning the result or an error message.

Key approach aspects (full code available for reference)

TOP PERFORMING APPROACH #3:
Iteration: 4
Accuracy: 1.00
Approach Summary: The script uses a chain-of-thought approach, decomposing a question into sub-questions, extracting information, and then synthesizing an answer. It employs three distinct agent roles: a question decomposer, an information extraction expert, and an answer synthesis expert. It leverages the `call_llm` function to interact with the Gemini model using specifically crafted prompts for each agent, and incorporates validation steps after each stage to ensure correctness. The script begins with the `main` function, which orchestrates the calls to `decompose_question`, `extract_information`, and `synthesize_answer`; these functions in turn use `call_llm` to generate responses which undergo validation at each step.

Key approach aspects (full code available for reference)

            
FULL SCRIPT TO REFINE:
```python
import os
import re

def main(question):
    """
    Solve the question by extracting relevant information from the passage and using chain-of-thought reasoning.
    This approach builds upon a prior attempt to use question decomposition, strengthens answer synthesis, and includes examples in all LLM prompts.
    """
    try:
        # Step 1: Decompose the question into sub-questions.
        decomposition_result = decompose_question(question)
        if not decomposition_result.get("is_valid"):
            return f"Error in question decomposition: {decomposition_result.get('validation_feedback')}"
        
        # Step 2: Extract relevant information based on sub-questions.
        information_extraction_result = extract_information(question, decomposition_result["sub_questions"])
        if not information_extraction_result.get("is_valid"):
            return f"Error in information extraction: {information_extraction_result.get('validation_feedback')}"

        # Step 3: Synthesize the answer from extracted information.
        answer_synthesis_result = synthesize_answer(question, information_extraction_result["extracted_info"])
        if not answer_synthesis_result.get("is_valid"):
            return f"Error in answer synthesis: {answer_synthesis_result.get('validation_feedback')}"
        
        return answer_synthesis_result["answer"]

    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"

def decompose_question(question, max_attempts=3):
    """Decompose the main question into smaller, answerable sub-questions."""
    system_instruction = "You are an expert question decomposer."
    
    for attempt in range(max_attempts):
        decomposition_prompt = f"""
        Decompose the given question into smaller, self-contained sub-questions that, when answered, will fully answer the original question.

        Example 1:
        Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Sub-questions:
        1. How many yards was Chris Johnson's first touchdown?
        2. How many yards was Jason Hanson's first field goal?
        3. What is the sum of those two values?

        Example 2:
        Question: Who caught the final touchdown of the game?
        Sub-questions:
        1. Who scored the final touchdown of the game?

        Question: {question}
        Sub-questions:
        """
        
        decomposition_result = call_llm(decomposition_prompt, system_instruction)
        
        # Verify if the decomposition is valid
        verification_prompt = f"""
        Verify if these sub-questions are valid and sufficient to answer the original question.

        Original Question: {question}
        Sub-questions: {decomposition_result}

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Sub-questions: 1. How many yards was Chris Johnson's first touchdown? 2. How many yards was Jason Hanson's first field goal? 3. What is the sum of those two values?
        Validation: Valid

        Is the decomposition valid and sufficient? Respond with 'Valid' or 'Invalid'.
        """
        
        verification_result = call_llm(verification_prompt, system_instruction)
        
        if "valid" in verification_result.lower():
            return {"is_valid": True, "sub_questions": decomposition_result}
        else:
            print(f"Decomposition validation failed (attempt {attempt+1}/{max_attempts}): {verification_result}")
            
    return {"is_valid": False, "validation_feedback": "Failed to decompose the question successfully."}

def extract_information(question, sub_questions, max_attempts=3):
    """Extract relevant information from the passage based on the sub-questions."""
    system_instruction = "You are an information extraction expert."
    
    for attempt in range(max_attempts):
        extraction_prompt = f"""
        Given the original question and its sub-questions, extract the relevant information from the passage required to answer the sub-questions.

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Sub-questions:
        1. How many yards was Chris Johnson's first touchdown?
        2. How many yards was Jason Hanson's first field goal?
        Extracted Information:
        Chris Johnson's first touchdown was 6 yards. Jason Hanson's first field goal was 53 yards.

        Original Question: {question}
        Sub-questions: {sub_questions}
        Extracted Information:
        """
        
        extracted_info = call_llm(extraction_prompt, system_instruction)
        
        # Validate information extraction
        verification_prompt = f"""
        Verify if the extracted information is relevant and sufficient to answer the sub-questions.

        Original Question: {question}
        Sub-questions: {sub_questions}
        Extracted Information: {extracted_info}

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Sub-questions: 1. How many yards was Chris Johnson's first touchdown? 2. How many yards was Jason Hanson's first field goal?
        Extracted Information: Chris Johnson's first touchdown was 6 yards. Jason Hanson's first field goal was 53 yards.
        Validation: Valid

        Is the extraction relevant and sufficient? Respond with 'Valid' or 'Invalid'.
        """
        
        verification_result = call_llm(verification_prompt, system_instruction)
        
        if "valid" in verification_result.lower():
            return {"is_valid": True, "extracted_info": extracted_info}
        else:
            print(f"Information extraction validation failed (attempt {attempt+1}/{max_attempts}): {verification_result}")
            
    return {"is_valid": False, "validation_feedback": "Failed to extract relevant information successfully."}

def synthesize_answer(question, extracted_info, max_attempts=3):
    """Synthesize the answer from the extracted information to answer the main question."""
    system_instruction = "You are an answer synthesis expert."

    for attempt in range(max_attempts):
        synthesis_prompt = f"""
        Given the original question and the extracted information, synthesize the final answer.

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Extracted Information: Chris Johnson's first touchdown was 6 yards. Jason Hanson's first field goal was 53 yards.
        Final Answer: 59

        Original Question: {question}
        Extracted Information: {extracted_info}
        Final Answer:
        """
        
        answer = call_llm(synthesis_prompt, system_instruction)

        # Answer checker
        verification_prompt = f"""
        Check if the answer is correct and answers the original question fully.

        Original Question: {question}
        Synthesized Answer: {answer}

        Example:
        Original Question: How many yards did Chris Johnson's first touchdown and Jason Hanson's first field goal combine for?
        Synthesized Answer: 59
        Validation: Valid

        Is the answer correct and complete? Respond with 'Valid' or 'Invalid'.
        """
        
        verification_result = call_llm(verification_prompt, system_instruction)

        if "valid" in verification_result.lower():
            return {"is_valid": True, "answer": answer}
        else:
            print(f"Answer synthesis validation failed (attempt {attempt+1}/{max_attempts}): {verification_result}")
            
    return {"is_valid": False, "validation_feedback": "Failed to synthesize a valid answer."}

def call_llm(prompt, system_instruction=None):
    """Call the Gemini LLM with a prompt and return the response. DO NOT deviate from this example template or invent configuration options. This is how you call the LLM."""
    try:
        from google import genai
        from google.genai import types
        import os  # Import the os module

        # Initialize the Gemini client
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        # Call the API with system instruction if provided
        if system_instruction:
            response = client.models.generate_content(
                model="gemini-2.0-flash", 
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction
                ),
                contents=prompt
            )
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )

        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return f"Error: {str(e)}"
```

            PREVIOUSLY ATTEMPTED VARIATIONS:
            

            EXPLOITATION GUIDANCE:
            1. Review the error patterns, targeted improvements, and accumulated learnings carefully
            2. CRITICAL: Break down the problem into distinct reasoning steps before modifying code
            3. CRITICAL: Analyze the best scripts to identify which components are working well and which are failing. Focus your improvements on the weak points while preserving successful components.
            4. Maintain the core successful elements of the best approaches
            5. Consider how you can combine strengths from multiple top-performing approaches
            6. CRITICAL: Add EMBEDDED EXAMPLES to EVERY LLM prompt that illustrate:
               - Sample input that resembles the dataset
               - Step-by-step reasoning through the example
               - Properly formatted output
            7. Focus on fixing specific issues identified in previous error analyses. Create an explicit HYPOTHESIS for each targeted improvement, as well as a way to verify if it's successful.
            8. Enhance chain-of-thought reasoning and verification steps. Verification steps should be added to different parts of the pipeline in order to help deduce which parts are successful and where the system is breaking
            9. Apply the key insights from ACCUMULATED LEARNINGS to enhance the approach
            10. Pay SPECIAL ATTENTION to the weaknesses and improvement suggestions from the capability assessment

            IMPROVEMENT STRATEGY:
            Analyze why the top approaches succeeded where others failed. Identify the key differentiators and strengthen them further.

            SYSTEMATIC ENHANCEMENT APPROACH:
            1. First, identify which specific function or component is underperforming based on error analysis
            2. Examine how error cases differ from successful cases
            3. For each identified weakness, implement a targeted enhancement
            4. Add additional verification steps around modified components
            5. Consider how components interact - ensure improvements don't break successful parts

            Consider enhancing the script with one or more of these patterns:
            - Repeated validation with feedback loops
            - Multi-perspective analysis with synthesis
            - Dynamic input-dependent routing
            - Hybrid approaches combining LLM with deterministic functions
            - Best-of-n solution generation and selection
            - ReAct pattern for interactive reasoning and action
            - If it is unknown how successful a processing state or part of the pipeline is, include verification steps to different parts of the pipeline in order to help deduce which parts are successful and where the system is breaking
            - Answer checkers to validate the final answer against the problem statement. If the answer is incorrect, the checker can send the answer back to an earlier part of the system for refinement with feedback

            Here's how to call the Gemini API. Use this example without modification and don't invent configuration options:
            def call_llm(prompt, system_instruction=None):
    """Call the Gemini LLM with a prompt and return the response. DO NOT deviate from this example template or invent configuration options. This is how you call the LLM."""
    try:
        from google import genai
        from google.genai import types

        # Initialize the Gemini client
        client = genai.Client(api_key=os.environ.get("GEMINI_API_KEY"))

        # Call the API with system instruction if provided
        if system_instruction:
            response = client.models.generate_content(
                model="gemini-2.0-flash", 
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction
                ),
                contents=prompt
            )
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )

        return response.text
    except Exception as e:
        print(f"Error calling Gemini API: {str(e)}")
        return f"Error: {str(e)}"

            Since this is an EXPLOITATION phase:
            - Build upon what's working well in the best approaches
            - Consider creative combinations of successful techniques from different scripts
            - Make TARGETED improvements to address specific error patterns
            - For EACH key LLM prompt, include a relevant example with:
              * Sample input similar to the dataset
              * Expected reasoning steps
              * Desired output format
            - Apply the knowledge from our accumulated learnings
            - Significantly enhance the script to address weaknesses identified in the capability assessment

            CRITICAL REQUIREMENTS:
            1. The script MUST properly handle all string literals - be extremely careful with quotes and triple quotes
            2. The script MUST NOT exceed 150 lines of code to prevent truncation
            3. Include detailed comments explaining your improvements
            4. EVERY SINGLE LLM PROMPT must include at least one embedded example showing:
               - Sample input with reasoning
               - Desired output format
            5. Make proper use of error handling
            6. Implement robust capabilities to address the specific weaknesses identified in the capability assessment
            7. Do NOT use json.loads() in the LLM calls to process input data. JSON formatting is good to use to structure information as inputs and outputs, but attempting to have functions process JSON data explicitly with strict built-in functionality is error prone due to formatting issues and additional text that appears as documentation, reasoning, or comments. When passing data into another LLM call, you can read it as plain text rather than trying to load it in strict json format, is the better approach.

            Return a COMPLETE, RUNNABLE Python script that:
            1. Has a main function that takes a question string as input and returns the answer string
            2. Makes multiple LLM calls for different reasoning steps
            3. Has proper error handling for API calls
            4. Includes embedded examples in EVERY LLM prompt
            5. Is COMPLETE - no missing code, no "..." placeholders
            6. Closes all string literals properly

            BE EXTREMELY CAREFUL TO PROPERLY CLOSE ALL STRING QUOTES AND TRIPLE QUOTES!
            